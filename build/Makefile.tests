# -*- mode: Makefile; -*-
#--------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation.  All rights reserved.
#--------------------------------------------------------------------------------
# 2007-08-23
# 
# Definition of all unit tests for SCXCore 
#
#--------------------------------------------------------------------------------


#--------------------------------------------------------------------------------
# Support for Quantify from Rational Software (IBM now)

ifeq ($(BUILD_PROFILING),quantify)
	PROFILING=quantify
else
	PROFILING=
endif


#--------------------------------------------------------------------------------
# Support for BullseyeCoverage from Bullseye Testing Technology 
# Note: this was also done in the Makefile.Pegasus - do in OMI build? - TODO
ifeq ($(BUILD_TYPE),Bullseye)
	BULLSEYE_LINK=-L/opt/Bullseye/lib -lcov
	COVFILE=$(SCXPAL_INTERMEDIATE_DIR)/OpsMgr.cov
	PROFILING=COVFILE=$(COVFILE) covc --retain
	export COVFILE
else
	BULLSEYE_LINK=
	COVFILE=
	PROFILING=
endif

#--------------------------------------------------------------------------------
# Testrunner

TESTRUNNER_SRCFILES = \
	$(SCX_SHARED_TEST_ROOT)/testutils/testrunner.cpp \
	$(SCX_SHARED_TEST_ROOT)/testutils/scxassert_cppunit.cpp \
	$(SCX_SHARED_TEST_ROOT)/testutils/testrunnerlogpolicy.cpp 

TESTRUNNER_OBJFILES = $(call src_to_obj,$(TESTRUNNER_SRCFILES))
# Extra include dir for test code
$(TARGET_DIR)/testrunner: INCLUDES += $(UNITTEST_EXTRA_INCLUDES)
$(TARGET_DIR)/testrunner_core: INCLUDES += $(UNITTEST_EXTRA_INCLUDES)


#--------------------------------------------------------------------------------
# Includes for tests
include $(SCX_BRD)/build/Makefile.providerstests
include $(SCX_BRD)/build/Makefile.scxadmintests
include $(SCX_BRD)/build/Makefile.sslconfigtests

#--------------------------------------------------------------------------------
# All tests
POSIX_UNITTESTS_SRCFILES = \
	$(POSIX_UNITTESTS_CORE_SRCFILES) \
	$(POSIX_UNITTESTS_SYSTEM_SRCFILES) \
	$(POSIX_UNITTESTS_SSLCONFIG_SRCFILES) \
	$(POSIX_UNITTESTS_SCXADMIN_SRCFILES)

POSIX_UNITTESTS_PROVIDERS_OBJFILES = $(call src_to_obj,$(POSIX_UNITTESTS_PROVIDERS_SRCFILES))
POSIX_UNITTESTS_OBJFILES = $(call src_to_obj,$(POSIX_UNITTESTS_SRCFILES)) $(POSIX_UNITTESTS_PROVIDERS_OBJFILES)
POSIX_UNITTESTS_CORE_OBJFILES = $(call src_to_obj,$(POSIX_UNITTESTS_CORE_SRCFILES))


# Extra include dir for test code
$(INTERMEDIATE_DIR)/test/code/%.d: INCLUDES += $(UNITTEST_EXTRA_INCLUDES) -I$(PROVIDER_DIR)
$(INTERMEDIATE_DIR)/test/code/%.$(PF_OBJ_FILE_SUFFIX): INCLUDES += $(UNITTEST_EXTRA_INCLUDES) -I$(PROVIDER_DIR)

# Extra include dir for test code
$(INTERMEDIATE_DIR)/test/%.d: INCLUDES += $(UNITTEST_EXTRA_INCLUDES) -I$(PROVIDER_DIR)
$(INTERMEDIATE_DIR)/test/%.$(PF_OBJ_FILE_SUFFIX): INCLUDES += $(UNITTEST_EXTRA_INCLUDES) -I$(PROVIDER_DIR)

#--------------------------------------------------------------------------------
# Static dependencies on POSIX platforms

POSIX_UNITTESTS_CORE_STATICLIB_DEPS = \
	palsystem \
	scxcore \
	Util

# OM build (all components)

LOGFILEREADER_TOOL=logfilereader-tool
LOGFILEREADER_EXE=scxlogfilereader

POSIX_UNITTESTS_STATICLIB_DEPS = \
	scxadmin \
	scxsslconfig \
	omprovider

ifeq (1,0)
	metaprovider \
	providersupport

ifneq ($(SCX_STACK_ONLY),true)
POSIX_UNITTESTS_STATICLIB_DEPS += \
	cpuprovider \
	memoryprovider \
	runasprovider \
	processprovider \
	diskprovider \
	networkprovider \
	logfileprovider \
	asprovider \
	osprovider
endif
endif # ifeq (1,0)

# Foreach XYZ in the list above, build $(INTERMEDIATE_DIR)/libXYZ.a
POSIX_UNITTESTS_STATICLIB_DEPFILES = $(addprefix $(INTERMEDIATE_DIR)/lib, $(addsuffix .$(PF_STAT_LIB_FILE_SUFFIX), $(POSIX_UNITTESTS_STATICLIB_DEPS)))

POSIX_UNITTESTS_CORE_STATICLIB_DEPFILES = \
	$(addprefix $(SCXPAL_TARGET_DIR)/lib, $(addsuffix .$(PF_STAT_LIB_FILE_SUFFIX), $(POSIX_UNITTESTS_CORE_STATICLIB_DEPS))) \
	$(STATIC_PRODUCTDEPENDENCIES_DEPFILES)

# Foreach XYZ in the list above, build -lXYZ
POSIX_UNITTESTS_LINK_STATICLIBS = $(addprefix -l, $(POSIX_UNITTESTS_STATICLIB_DEPS))
POSIX_UNITTESTS_CORE_LINK_STATICLIBS = \
	$(addprefix -l, $(POSIX_UNITTESTS_CORE_STATICLIB_DEPS)) \
	-lProductDependencies \
	-lmicxx \
	-lbase

# For some reason, only AIX needs OMI's libio.a library
ifeq ($(PF),AIX)
POSIX_UNITTESTS_CORE_LINK_STATICLIBS += -lio
endif

#--------------------------------------------------------------------------------
# Check if user has requested a subset of the unit tests only 
ifneq ($(UNITTESTS_SUBSET),)
UNITTESTS_OBJFILES = $(TESTRUNNER_OBJFILES) $(call src_to_obj,$(UNITTESTS_SUBSET))
UNITTESTS_CORE_OBJFILES = $(TESTRUNNER_OBJFILES) $(call src_to_obj,$(UNITTESTS_SUBSET))
else
UNITTESTS_OBJFILES = $(TESTRUNNER_OBJFILES) $(POSIX_UNITTESTS_OBJFILES) 
UNITTESTS_CORE_OBJFILES = $(TESTRUNNER_OBJFILES) $(POSIX_UNITTESTS_CORE_OBJFILES) 
endif


#--------------------------------------------------------------------------------
# This is a small tool for usage in the testrunner
CLOSEFILEDESCRIPTOR_SRCFILES = $(SCX_SHARED_TEST_ROOT)/testutils/closefiledescriptors/closefiledescriptors.cpp
CLOSEFILEDESCRIPTOR_OBJFILES = $(call src_to_obj,$(CLOSEFILEDESCRIPTOR_SRCFILES))

$(TARGET_DIR)/closefiledescriptors : $(CLOSEFILEDESCRIPTOR_OBJFILES)
	-$(MKPATH) $(TARGET_DIR)
	$(PROFILING) $(LINK) $(LINK_OUTFLAG) $(CLOSEFILEDESCRIPTOR_OBJFILES)

#--------------------------------------------------------------------------------
# The tool itself
testrunner-status:
	$(ECHO) "========================= Performing make OM testrunner"

$(TARGET_DIR)/testrunner : testrunner-status $(UNITTESTS_OBJFILES) $(POSIX_UNITTESTS_STATICLIB_DEPFILES) $(POSIX_UNITTESTS_CORE_STATICLIB_DEPFILES)
	$(MAKE) -s ccenable
	-$(MKPATH) $(TARGET_DIR)
	$(LINK) $(LINK_OUTFLAG) $(UNITTESTS_OBJFILES) $(CPPUNIT_LIB_PATH)/libcppunit.a $(POSIX_UNITTESTS_LINK_STATICLIBS) $(POSIX_UNITTESTS_CORE_LINK_STATICLIBS) $(BULLSEYE_LINK) $(LDFLAGS_TESTRUNNER) $(SSL_LIBS)
	$(MAKE) -s ccdisable

testbuild :  $(TARGET_DIR)/testrunner


# The tool itself
$(TARGET_DIR)/testrunner_core : testrunner-status $(UNITTESTS_CORE_OBJFILES) $(POSIX_UNITTESTS_CORE_STATICLIB_DEPFILES) 
	-$(MKPATH) $(TARGET_DIR)
	$(PROFILING) $(LINK) $(LINK_OUTFLAG) $(UNITTESTS_CORE_OBJFILES) $(CPPUNIT_LIB_PATH)/libcppunit.a $(POSIX_UNITTESTS_CORE_LINK_STATICLIBS) $(LDFLAGS_TESTRUNNER)

testbuild_core :  $(TARGET_DIR)/testrunner_core

testrun_copy : $(TARGET_DIR)/closefiledescriptors
	$(ECHO) "========================= Performing make testrun_copy OM"
	-$(MKPATH) $(TARGET_DIR)/testfiles
	$(COPY) $(SCX_SHARED_TEST_ROOT)/testutils/report.xsl $(TARGET_DIR)
	$(COPY) $(SCX_SHARED_TEST_ROOT)/testutils/createEnv.sh $(TARGET_DIR)/testfiles/
	$(COPY) $(SCX_SHARED_TEST_ROOT)/testutils/Jboss7VersionCheck.sh $(TARGET_DIR)/testfiles/
	$(COPY) $(SCX_SHARED_TEST_ROOT)/testutils/testrun_wrapper $(TARGET_DIR)/testfiles/
	$(COPY) $(SCX_UNITTEST_ROOT)/providers/logfile_provider/scxlogfilereader-test $(TARGET_DIR)/testfiles/
	chmod u+w $(TARGET_DIR)/report.xsl
	chmod u+wx $(TARGET_DIR)/testfiles/createEnv.sh
	chmod u+wx $(TARGET_DIR)/testfiles/Jboss7VersionCheck.sh
	chmod u+wx $(TARGET_DIR)/testfiles/testrun_wrapper
	chmod u+wx $(TARGET_DIR)/testfiles/scxlogfilereader-test
	$(COPY) $(TARGET_DIR)/closefiledescriptors $(TARGET_DIR)/testfiles/
	$(COPY) $(SCXOMI_LIBS)/libmicxx.* $(TARGET_DIR)

create_environment_sh : 
 ifeq ($(PF_DISTRO),ULINUX)
	cd $(TARGET_DIR); LD_LIBRARY_PATH=`cd /usr/local_ssl_1.0.0/lib*; pwd` testfiles/createEnv.sh
 else
	cd $(TARGET_DIR); testfiles/createEnv.sh
 endif

testrun_setup : $(TARGET_DIR)/testrunner testrun_copy create_environment_sh $(LOGFILEREADER_TOOL)

testrun_pkg : testrun_setup
	cd $(TARGET_DIR);rm -f testrun.tar;tar cvf testrun.tar testrunner $(LOGFILEREADER_EXE) testfiles

ifeq ($(BUILD_PRODUCTION),1)
BUILD_TESTRUN_PACKAGE=testrun_pkg
else
BUILD_TESTRUN_PACKAGE=
endif

# During code coverage run, the coverage file is OpsMgr.cov. That is also the name
# of the empty coverage file in the package. Once run as unit test, copy the file 
# with unit test coverage data to the target folder. 
testrun_copycovfile :
	if [ $(BUILD_TYPE) = Bullseye ]; then $(COPY) $(COVFILE) $(TARGET_DIR)/UnitTest.cov; fi

testrun : pal_test testrun_setup $(BUILD_TESTRUN_PACKAGE)
	$(ECHO) "========================= Performing OM testrun execution"
	cd $(TARGET_DIR);testfiles/testrun_wrapper .
	$(MAKE) testrun_copycovfile

pal_test :
ifeq ($(PAL_UNITTEST_DISABLE),)
	$(MAKE) -C ../../pal/build test
endif

test : testrun

testrun_noslow : testrun_setup
	$(ECHO) "========================= Performing OM testrun execution"
	cd $(TARGET_DIR); testfiles/testrun_wrapper . -attr=-SLOW -slow=25
	$(MAKE) testrun_copycovfile

testrun_nosudo : testrun_setup
	$(ECHO) "========================= Performing OM testrun execution"
	cd $(TARGET_DIR);./testrunner
	$(MAKE) testrun_copycovfile

testrun_core : $(TARGET_DIR)/testrunner_core testrun_copy
	$(ECHO) "========================= Performing OM testrun execution"
	cd $(TARGET_DIR);./testrunner_core


#================================================================================
# Test parts of the installer builder framework
#================================================================================
test_installerbuilder:
	cd ${SCX_BRD}/installer/InstallerBuilder/tests;python testrunner.py

#================================================================================
# Enable/disable profiling
#================================================================================

ccbuild: ccbuild_testrun

ccenable:
	$(MAKE) -s ccdisable
	if [ $(BUILD_TYPE) = Bullseye ]; then cov01 -1; fi

#
# It is possible that BullseyeCoverage is not installed on the system
# to make calling this instruction "safe", additional logic has been added
# to prevent the warning of 'command not in path' from disrupting the build 
#
ccdisable:
	if [ $(BUILD_TYPE) != Bullseye ]; then $(MAKE) -s -k ccdisable_helper; fi
	if [ $(BUILD_TYPE) = Bullseye ]; then cov01 -0; fi

#
# Faux target that will always be silent about turning off the code coverage tool(s)
#
ccdisable_helper:
	-cov01 -0 > /dev/null 2>&1


testrun_code_coverage: ccbuild_testrun

#================================================================================
# Dependency generation Targets
#================================================================================

# Rule for automatically generating dependencies.
OBJFILES_TEST=$(POSIX_UNITTESTS_OBJFILES) \
	$(POSIX_UNITTESTS_OBJFILES) \

DEPFILES_TEST=$(OBJFILES_TEST:.$(PF_OBJ_FILE_SUFFIX)=.d)


#-------------------------------- End of File -----------------------------------
