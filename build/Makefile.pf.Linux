# -*- mode: Makefile; -*-
#--------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation.  All rights reserved.
#--------------------------------------------------------------------------------
# 2007-08-23
# 
# Platform-specific overrides to the general POSIX platform file
# 
#--------------------------------------------------------------------------------

ifeq ($(PF_DISTRO), ULINUX)
	# Reassign SCXOMI directories to any OMI output directory (generic non-SSL use)
	SCXOMI_DEV_ROOT := $(SCXOMI_DIR)/output_openssl_1.0.0
	SCXOMI_INCLUDE := $(SCXOMI_DEV_ROOT)/include
	SCXOMI_LIBS := $(SCXOMI_DEV_ROOT)/lib
endif

# Catchall
ifeq (,$(PF_DISTRO))
	VERSTRING=UNKNOWN
	PF_DISTRO=UNKNOWN
	PF_MAJOR=UNKNOWN
	PF_MINOR=UNKNOWN
	$(warning "Unmatched version string")
endif

ifeq ($(PF_DISTRO)$(PF_MAJOR),REDHAT4)
	include Makefile.gcc3
else
	include Makefile.gcc4
endif		

#================================================================================
# OpenSSL 
# For ULINUX, we need to build against two versions of OpenSSL, 0.9.8 and 1.0.0. 
#================================================================================
ifeq ($(PF_DISTRO),ULINUX)

# Let's figure out the system version of SSL installed (for unit test purposes)

OPENSSL_SYSTEM_VERSION_FULL=$(shell openssl version | awk '{print $$2}')
OPENSSL_SYSTEM_VERSION_098=$(shell echo $(OPENSSL_SYSTEM_VERSION_FULL) | grep -Eq '^0.9.8'; echo $$?)
OPENSSL_SYSTEM_VERSION_100=$(shell echo $(OPENSSL_SYSTEM_VERSION_FULL) | grep -Eq '^1.0.'; echo $$?)

ifeq ($(OPENSSL_SYSTEM_VERSION_098), 0)
export OPENSSL_SYSTEM_VERSION="0.9.8"
else
ifeq ($(OPENSSL_SYSTEM_VERSION_100), 0)
export OPENSSL_SYSTEM_VERSION="1.0.0"
else
$(error Unable to determine SSL system version installed!)
endif
endif

displaySSLversion:
	@echo "OpenSSL system full version: $(OPENSSL_SYSTEM_VERSION_FULL)"
	@echo "OpenSSL system full version 098: $(OPENSSL_SYSTEM_VERSION_098)"
	@echo "OpenSSL system full version 100: $(OPENSSL_SYSTEM_VERSION_100)"
	@echo "OpenSSL system version: $(OPENSSL_SYSTEM_VERSION)"

# Now define other SSL variables for expansion/directory purposes

export OPENSSL098DIR=openssl_0.9.8
export OPENSSL100DIR=openssl_1.0.0

LINK_OPENSSL098=$(LINK) -L$(INTERMEDIATE_DIR)/$(OPENSSL098DIR) -L$(SCXPAL_TARGET_DIR)
LINK_OPENSSL100=$(LINK) -L$(INTERMEDIATE_DIR)/$(OPENSSL100DIR) -L$(SCXPAL_TARGET_DIR)

ifeq ($(PF_WIDTH),64)
	PKG_CONFIG_PATH_OPENSSL098=/usr/local_ssl_0.9.8/lib/pkgconfig
	LD_LIBRARY_PATH_OPENSSL098=/usr/local_ssl_0.9.8/lib
	OPENSSL_BINPATH_OPENSSL098=/usr/local_ssl_0.9.8/bin/openssl
	PKG_CONFIG_PATH_OPENSSL100=/usr/local_ssl_1.0.0/lib64/pkgconfig
	LD_LIBRARY_PATH_OPENSSL100=/usr/local_ssl_1.0.0/lib64
	OPENSSL_BINPATH_OPENSSL100=/usr/local_ssl_1.0.0/bin/openssl
else
	PKG_CONFIG_PATH_OPENSSL098=/usr/local_ssl_0.9.8/lib/pkgconfig
	LD_LIBRARY_PATH_OPENSSL098=/usr/local_ssl_0.9.8/lib
	OPENSSL_BINPATH_OPENSSL098=/usr/local_ssl_0.9.8/bin/openssl
	PKG_CONFIG_PATH_OPENSSL100=/usr/local_ssl_1.0.0/lib/pkgconfig
	LD_LIBRARY_PATH_OPENSSL100=/usr/local_ssl_1.0.0/lib
	OPENSSL_BINPATH_OPENSSL100=/usr/local_ssl_1.0.0/bin/openssl
endif 
endif 

#--------------------------------------------------------------------------------
# Paths
#--------------------------------------------------------------------------------

# Path to where the CPPUNIT libraries are checked in 
CPPUNIT_LIB_PATH=$(SCX_SHARED_TST_EXT_LIB_DIR)/linux/$(ARCH)/cppunit

#--------------------------------------------------------------------------------
# Tools on this platform
#--------------------------------------------------------------------------------

# Link a dynamic lib 
LINK_DYNLIB=g++ -shared -Wl,-rpath,/usr/lib
ifeq ($(PF_ARCH),x86)
	LINK_DYNLIB+= -m32 
else
	LINK_DYNLIB+= -m64 
endif
LINK_DYNLIB+= -L$(INTERMEDIATE_DIR) -L$(SCXPAL_TARGET_DIR)

#--------------------------------------------------------------------------------
# Link switches for this platform, per target
#--------------------------------------------------------------------------------

LDFLAGS_RPM =  -lrpm -lpopt
LDFLAGS_DYNLIB = -ldl -lpthread -lcrypt -lrt
LDFLAGS_EXECUTABLE = -ldl -lpthread -lrt

ifneq ($(PF_DISTRO),ULINUX)
LDFLAGS_DYNLIB += $(LDFLAGS_RPM)
LDFLAGS_EXECUTABLE += $(LDFLAGS_RPM)
endif

ifeq ($(PF_DISTRO),SUSE)
	ifeq ($(PF_MAJOR),9)
	else
		LDFLAGS_EXECUTABLE += -pie
	endif
endif

# The Core Provider Module links with these 
LDFLAGS_COREPROVIDERMODULE = $(LDFLAGS_DYNLIB)

# The Test Provider Module links with these
LDFLAGS_TESTPROVIDERMODULE = $(LDFLAGS_DYNLIB)

# Test Provider specific link flags. Used to hide symbols
TESTPROVIDERMODULE_EXTRA_LINKFLAGS=-Wl,--version-script=$(INTERMEDIATE_DIR)/testprovider.map

# The testrunner links with these
LDFLAGS_TESTRUNNER = $(LDFLAGS_EXECUTABLE)   

# Transforms a list of symbols that should be exposed to the correct link flags
get_ld_flags_for_retaining_symbols=$(addprefix -u, $(1))

# Run pkg-config to get ssl library switches for this platform
SSL_LIBS = `pkg-config --libs openssl`

#--------------------------------------------------------------------------------
# Compiler switch tweaks
#--------------------------------------------------------------------------------

CXXFLAGS+=

#--------------------------------------------------------------------------------
# InstallBuilder datafile determination
#--------------------------------------------------------------------------------

PF_DEPENDENT_DATAFILES = Linux.data
ifeq ($(PF_DISTRO), REDHAT)
PF_DEPENDENT_DATAFILES += Linux_RPM.data Linux_RHEL.data
  ifeq ($(PF_MAJOR), 7)
PF_DEPENDENT_DATAFILES += Linux_RHEL_7.data
  endif
  ifeq ($(PF_MAJOR), 6)
PF_DEPENDENT_DATAFILES += Linux_RHEL_6.data
  endif
  ifeq ($(PF_MAJOR), 5)
PF_DEPENDENT_DATAFILES += Linux_RHEL_5.data
  endif
  ifeq ($(PF_MAJOR), 4)
PF_DEPENDENT_DATAFILES += Linux_RHEL_4.data
  endif
endif
ifeq ($(PF_DISTRO), SUSE)
PF_DEPENDENT_DATAFILES += Linux_RPM.data Linux_SLES.data
  ifeq ($(PF_MAJOR), 11)
PF_DEPENDENT_DATAFILES += Linux_SLES_11.data
  endif
  ifeq ($(PF_MAJOR), 10)
PF_DEPENDENT_DATAFILES += Linux_SLES_10.data
  endif
  ifeq ($(PF_MAJOR), 9)
PF_DEPENDENT_DATAFILES += Linux_SLES_9.data
  endif
endif
ifeq ($(PF_DISTRO), ULINUX)
PF_DEPENDENT_DATAFILES += Linux_ULINUX.data
  ifeq ($(PF_ARCH), x86)
PF_DEPENDENT_DATAFILES += Linux_ULINUX_x86.data
  else
PF_DEPENDENT_DATAFILES += Linux_ULINUX_x64.data
  endif
  ifeq ($(PF_DISTRO_ULINUX_R), 1)
PF_DEPENDENT_DATAFILES += Linux_RPM.data Linux_ULINUX_R.data
  endif
  ifeq ($(PF_DISTRO_ULINUX_D), 1)
PF_DEPENDENT_DATAFILES += Linux_DPKG.data Linux_ULINUX_D.data
  endif
endif

#-------------------------------- End of File -----------------------------------
