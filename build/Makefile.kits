 -*- mode: Makefile; -*-
#--------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation.  All rights reserved.
#--------------------------------------------------------------------------------
# 2007-08-23
#--------------------------------------------------------------------------------

ifeq ($(PF_DISTRO_ULINUX_D),1)
  PF_AGENTTYPE=D
else

  ifeq ($(PF_DISTRO_ULINUX_R),1)
    PF_AGENTTYPE=R
  else
    PF_AGENTTYPE=
  endif

endif

ifneq ($(COMBINED_PACKAGES),1)
  DATAFILES = Base_SCXCore.data $(PF_DEPENDENT_DATAFILES)
else
  DATAFILES = Base_SCXCore.data Linux.data Linux_ULINUX.data
  ifeq ($(PF_ARCH), x86)
    DATAFILES += Linux_ULINUX_x86.data
  else
    DATAFILES += Linux_ULINUX_x64.data
  endif
  DATAFILES_R = Linux_RPM.data
  DATAFILES_D = Linux_DPKG.data

  OUTPUT_PACKAGE_PREFIX=scx-cimprov-$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH)-$(SCX_BUILDVERSION_BUILDNR).universal.$(PF_ARCH)
endif

DISTRO_TYPE = $(PF)
ifeq ($(PF),Linux)
DISTRO_TYPE = $(PF)_$(PF_DISTRO)
 ifneq ($(COMBINED_PACKAGES),1)
  ifeq ($(PF_DISTRO_ULINUX_R),1)
DISTRO_TYPE = $(PF)_$(PF_DISTRO)_R
  endif
  ifeq ($(PF_DISTRO_ULINUX_D),1)
DISTRO_TYPE = $(PF)_$(PF_DISTRO)_D
  endif
 endif
endif

ifneq ($(COMBINED_PACKAGES),1)
  ifneq ($(PF),SunOS)
    ifeq ($(PF_ARCH),x86)
      OSS_KITS:=$(shell cd $(SCX_BRD)/installer/oss-kits; ls *-oss-test.sh *.i686.sh)
    else
      ifeq ($(PF_ARCH),x64)
        OSS_KITS:=$(shell cd $(SCX_BRD)/installer/oss-kits; ls *-oss-test.sh *.x86_64.sh)
      endif
    endif
  endif
endif

installerOnly: compressed_kit bundle

STAGING_DIR = $(SCX_BRD)/installer/intermediate/staging

# Easy way to just run installer (if you know all targets are built properly)
native_kit: GetLinuxOS scx_scripts
	$(ECHO) "========================= Performing make installer"
	$(ECHO) PF=$(PF) > $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_DISTRO=$(PF_DISTRO) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_MAJOR=$(PF_MAJOR) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_MINOR=$(PF_MINOR) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_ARCH=$(PF_ARCH) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_DISTRO_ULINUX_D=$(PF_DISTRO_ULINUX_D) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_DISTRO_ULINUX_R=$(PF_DISTRO_ULINUX_R) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
        # The options passed to the installbuilder are inserted into the Variables list.  They will override whatever variables are specified in the datafiles.

ifneq ($(COMBINED_PACKAGES),1)
  ifneq ($(PF_DISTRO),ULINUX)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(TARGET_DIR) \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX= \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(DATAFILES)
  else
	sudo rm -rf $(STAGING_DIR)
	rm -rf $(TARGET_DIR)/{098,100}
	mkdir -p $(TARGET_DIR)/{098,100}
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(TARGET_DIR)/098 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_0.9.8 \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(DATAFILES)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(TARGET_DIR)/100 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.0.0 \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(DATAFILES)
  endif
else
	# Build for COMBINED_PACKAGES (.rpm and .deb living together)
	# First comes RPM packages
	sudo rm -rf $(STAGING_DIR)
	rm -rf $(TARGET_DIR)/{098,100}
	mkdir -p $(TARGET_DIR)/{098,100}
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(TARGET_DIR)/098 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_0.9.8 \
		--DISABLE_PORT=true \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX) \
		$(DATAFILES) $(DATAFILES_R)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(TARGET_DIR)/100 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.0.0 \
		--DISABLE_PORT=true \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX) \
		$(DATAFILES) $(DATAFILES_R)

	# Next comes DEB packages
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(TARGET_DIR)/098 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_0.9.8 \
		--DPKG_LOCATION=$(SCXPAL_DIR)/installer/InstallBuilder/tools/bin/dpkg-deb-$(PF_ARCH) \
		--DISABLE_PORT=true \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX) \
		$(DATAFILES) $(DATAFILES_D)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(TARGET_DIR)/100 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.0.0 \
		--DPKG_LOCATION=$(SCXPAL_DIR)/installer/InstallBuilder/tools/bin/dpkg-deb-$(PF_ARCH) \
		--DISABLE_PORT=true \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX) \
		$(DATAFILES) $(DATAFILES_D)

endif

bundle: native_kit
ifneq ($(OSS_KITS),)
	# Copy OSS kit files to target directory if Linux or ULINUX
	cd $(SCX_BRD)/installer/oss-kits; cp $(OSS_KITS) $(TARGET_DIR); cd $(TARGET_DIR); chmod u+wx $(OSS_KITS);
endif
	# Copy remaining kit files to target directory
ifneq ($(COMBINED_PACKAGES),1)
  ifneq ($(PF_DISTRO),ULINUX)
	# (Copying for non-combined packages, not ULINUX)
	cp `find $(SCXOMI_DIR)/output -name *.$(PACKAGE_SUFFIX)` $(TARGET_DIR)/
	cp `find $(SCXOMI_DIR)/output -name package_filename` $(TARGET_DIR)/omi_package_filename
	cd $(TARGET_DIR); tar cvf `cat $(TARGET_DIR)/package_filename`.tar `cat $(TARGET_DIR)/package_filename` `cat $(TARGET_DIR)/omi_package_filename` $(OSS_KITS)
	../installer/bundle/create_bundle.sh $(DISTRO_TYPE) \
                                             $(TARGET_DIR) \
                                             `cat $(TARGET_DIR)/package_filename`.tar \
                                             `cat $(TARGET_DIR)/package_filename` \
                                             `cat $(TARGET_DIR)/omi_package_filename`
  else
	# (Copying for non-combined packages, ULINUX)
	cp `find $(SCXOMI_DIR)/output_openssl_0.9.8 -name *.$(PACKAGE_SUFFIX)` $(TARGET_DIR)/098/
	cp `find $(SCXOMI_DIR)/output_openssl_0.9.8 -name package_filename` $(TARGET_DIR)/098/omi_package_filename
	cp `find $(SCXOMI_DIR)/output_openssl_1.0.0 -name *.$(PACKAGE_SUFFIX)` $(TARGET_DIR)/100/
	cp `find $(SCXOMI_DIR)/output_openssl_1.0.0 -name package_filename` $(TARGET_DIR)/100/omi_package_filename
	cd $(TARGET_DIR); tar cvf `cat 098/package_filename`.tar 098/`cat 098/package_filename` 098/`cat 098/omi_package_filename` 100/`cat 100/package_filename` 100/`cat 100/omi_package_filename` $(OSS_KITS)
	../installer/bundle/create_bundle.sh $(DISTRO_TYPE) \
					     $(TARGET_DIR)  \
                                             `cat $(TARGET_DIR)/098/package_filename`.tar \
                                             `cat $(TARGET_DIR)/098/package_filename` \
                                             `cat $(TARGET_DIR)/098/omi_package_filename`
  endif
else
	# (Copying for combined packages)
	cd $(TARGET_DIR); tar cvf $(OUTPUT_PACKAGE_PREFIX).tar 098/$(OUTPUT_PACKAGE_PREFIX).{rpm,deb} 100/$(OUTPUT_PACKAGE_PREFIX).{rpm,deb}
	../installer/bundle/create_bundle.sh $(DISTRO_TYPE) $(TARGET_DIR) $(OUTPUT_PACKAGE_PREFIX).tar $(OUTPUT_PACKAGE_PREFIX) ""
endif

# Technically, a compressed kit doesn't have a prereq on the bundle,
# but compressing the kit will make the uncompressed kit unavailable to the bundle...
compressed_kit: native_kit bundle
ifeq ($(PF),SunOS)
	compress -f $(TARGET_DIR)/`cat $(TARGET_DIR)/package_filename`
endif
ifeq ($(PF),HPUX)
	compress -f $(TARGET_DIR)/`cat $(TARGET_DIR)/package_filename`
endif
ifeq ($(PF),AIX)
	gzip -f $(TARGET_DIR)/`cat $(TARGET_DIR)/package_filename`
endif

# Generate scripts that are consumed by SCXCore
scx_scripts:
	python $(SCX_BRD)/installer/generate_scxcore_scripts.py \
		--OUTPUT_DIR=$(INTERMEDIATE_DIR) \
		--PF=$(PF) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--BT=$(BUILD_TYPE)

installerPackage: \
	scxcore-status $(TARGET_DIR)/libSCXCoreProviderModule.$(PF_DYN_LIB_FILE_SUFFIX) \
	scx-tools-status scx-tools installerOnly

ssl-tool-status:
	$(ECHO) "========================= Performing make ssl-tool"

scx-tools-status:
	$(ECHO) "========================= Performing make scx-tools"

scxcore-status:
	$(ECHO) "========================= Performing make OpsMgr"

ifeq ($(PF),Linux)
GetLinuxOS: $(TARGET_DIR)/GetLinuxOS.sh

$(TARGET_DIR)/GetLinuxOS.sh: $(SCXPAL_TARGET_DIR)/GetLinuxOS.sh
	sed "s@<RelDir>@/etc/opt/microsoft/scx/conf@" $(SCXPAL_TARGET_DIR)/GetLinuxOS.sh > $(TARGET_DIR)/GetLinuxOS.sh
	chmod +x $(TARGET_DIR)/GetLinuxOS.sh
else
GetLinuxOS:
endif

#-------------------------------- End of File -----------------------------------
