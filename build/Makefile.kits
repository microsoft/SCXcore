 -*- mode: Makefile; -*-
#--------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation.  All rights reserved.
#--------------------------------------------------------------------------------
# 2007-08-23
#--------------------------------------------------------------------------------

ifeq ($(PF_DISTRO_ULINUX_D),1)
  PF_AGENTTYPE=D
else

  ifeq ($(PF_DISTRO_ULINUX_R),1)
    PF_AGENTTYPE=R
  else
    PF_AGENTTYPE=
  endif

endif

DATAFILES = Base_SCXCore.data $(PF_DEPENDENT_DATAFILES)

DISTRO_TYPE = $(PF)
ifeq ($(PF),Linux)
DISTRO_TYPE = $(PF)_$(PF_DISTRO)
 ifeq ($(PF_DISTRO_ULINUX_R),1)
DISTRO_TYPE = $(PF)_$(PF_DISTRO)_R
 endif
 ifeq ($(PF_DISTRO_ULINUX_D),1)
DISTRO_TYPE = $(PF)_$(PF_DISTRO)_D
 endif
endif

installerOnly: compressed_kit bundle

STAGING_DIR = $(SCX_BRD)/installer/intermediate/staging

# Easy way to just run installer (if you know all targets are built properly)
native_kit: GetLinuxOS scx_scripts
	$(ECHO) "========================= Performing make installer"
	sudo rm -rf $(STAGING_DIR)
# The options passed to the installbuilder are inserted into the Variables list.  They will override whatever variables are specified in the datafiles.
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(TARGET_DIR) \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(DATAFILES)

bundle: native_kit
	../installer/bundle/create_bundle.sh $(DISTRO_TYPE) $(TARGET_DIR) `cat $(TARGET_DIR)/package_filename`

# Technically, a compressed kit doesn't have a prereq on the bundle, 
# but compressing the kit will make the uncompressed kit unavailable to the bundle...
compressed_kit: native_kit bundle
ifeq ($(PF),SunOS)
	compress -f $(TARGET_DIR)/`cat $(TARGET_DIR)/package_filename`
endif
ifeq ($(PF),HPUX)
	compress -f $(TARGET_DIR)/`cat $(TARGET_DIR)/package_filename`
endif
ifeq ($(PF),AIX)
	gzip -f $(TARGET_DIR)/`cat $(TARGET_DIR)/package_filename`
endif

# Generate scripts that are consumed by SCXCore
scx_scripts: 
	python $(SCX_BRD)/installer/generate_scxcore_scripts.py \
		--OUTPUT_DIR=$(INTERMEDIATE_DIR) \
		--PF=$(PF) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--BT=$(BUILD_TYPE)

installerPackage: \
	scxcore-status $(TARGET_DIR)/libSCXCoreProviderModule.$(PF_DYN_LIB_FILE_SUFFIX) \
	scx-tools-status scx-tools installerOnly

ssl-tool-status:
	$(ECHO) "========================= Performing make ssl-tool"

scx-tools-status:
	$(ECHO) "========================= Performing make scx-tools"

scxcore-status:
	$(ECHO) "========================= Performing make OpsMgr"

ifeq ($(PF_DISTRO),ULINUX)
GetLinuxOS: $(TARGET_DIR)/GetLinuxOS.sh

$(TARGET_DIR)/GetLinuxOS.sh: $(SCXPAL_TARGET_DIR)/GetLinuxOS.sh
	sed "s@<RelDir>@/etc/opt/microsoft/scx/conf@" $(SCXPAL_TARGET_DIR)/GetLinuxOS.sh > $(TARGET_DIR)/GetLinuxOS.sh
	chmod +x $(TARGET_DIR)/GetLinuxOS.sh
else
GetLinuxOS:
endif

#-------------------------------- End of File -----------------------------------
