 -*- mode: Makefile; -*-
#--------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation.  All rights reserved.
#--------------------------------------------------------------------------------
# 2007-08-23
#--------------------------------------------------------------------------------

ifneq ($(COMBINED_PACKAGES),1)
  DATAFILES = Base_SCXCore.data $(PF_DEPENDENT_DATAFILES)
	ifeq ($(PF_ARCH),ppc)
                SCX_PREFIX=scx
                OUTPUT_PACKAGE_PREFIX=$(SCX_PREFIX)-$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH)-$(SCX_BUILDVERSION_BUILDNR).rhel.$(PF_MAJOR).$(PF_ARCH)
                PF_DISTRO=REDHAT
	endif
else
  DATAFILES = Base_SCXCore.data Linux.data
  DATAFILES_R = Linux_RPM.data
  DATAFILES_D = Linux_DPKG.data

  ifneq ($(DISABLE_LISTENER),0)
    DISABLE_PORT=--DISABLE_PORT=true
    SCX_PREFIX=scx-cimprov
  else
    DISABLE_PORT=
    SCX_PREFIX=scx

    # Currently, if we have an active listener, we want OSS bits.
    # If this ever changes, we'll likely need a setting in configure script.
    ifneq ($(PF),SunOS)
      ifeq ($(PF_ARCH),x86)
        OSS_KITS:=$(shell cd $(SCX_BRD)/../opsmgr-kits; ls *-oss-test.sh *.i686.sh)
      else
        ifeq ($(PF_ARCH),x64)
          OSS_KITS:=$(shell cd $(SCX_BRD)/../opsmgr-kits; ls *-oss-test.sh *.x86_64.sh)
        endif
      endif
    endif
  endif

  OUTPUT_PACKAGE_PREFIX=$(SCX_PREFIX)-$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH)-$(SCX_BUILDVERSION_BUILDNR).universal.$(PF_ARCH)
endif

DISTRO_TYPE = $(PF)
ifeq ("$(wildcard /usr/bin/dpkg-deb)","")
DPKG_LOCATION="--DPKG_LOCATION=$(SCXPAL_DIR)/installer/InstallBuilder/tools/bin/dpkg-deb-$(PF_ARCH)"
else
DPKG_LOCATION=
endif

installerOnly: bundle

STAGING_DIR = $(SCX_BRD)/installer/intermediate/staging

# Easy way to just run installer (if you know all targets are built properly)
kit : GetLinuxOS scx_scripts
	$(ECHO) "========================= Performing make installer"
	$(ECHO) PF=$(PF) > $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_DISTRO=$(PF_DISTRO) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_MAJOR=$(PF_MAJOR) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_MINOR=$(PF_MINOR) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_ARCH=$(PF_ARCH) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
        # The options passed to the installbuilder are inserted into the Variables list.  They will override whatever variables are specified in the datafiles.

ifneq ($(COMBINED_PACKAGES),1)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR) \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX= \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(DATAFILES)

else

	# Build for COMBINED_PACKAGES (.rpm and .deb living together, mass hysteria)
	# First comes RPM packages
	sudo rm -rf $(STAGING_DIR)
	rm -rf $(INTERMEDIATE_DIR)/{098,100}
	mkdir -p $(INTERMEDIATE_DIR)/{098,100}

	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/098 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_0.9.8 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX) \
		$(DATAFILES) $(DATAFILES_R)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/100 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.0.0 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX) \
		$(DATAFILES) $(DATAFILES_R)

	# Next comes DEB packages
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/098 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_0.9.8 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX) \
		$(DATAFILES) $(DATAFILES_D)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/100 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.0.0 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX) \
		$(DATAFILES) $(DATAFILES_D)

endif

bundle: kit
	mkdir -p $(TARGET_DIR)

ifneq ($(OSS_KITS),)
	# Copy OSS kit files to target directory if Linux or ULINUX
	cd $(SCX_BRD)/../opsmgr-kits; cp $(OSS_KITS) $(INTERMEDIATE_DIR); cd $(INTERMEDIATE_DIR); chmod u+wx $(OSS_KITS);
endif

	# Copy remaining kit files to target directory
ifneq ($(COMBINED_PACKAGES),1)

	# (Copying for non-combined packages)
	cp `find $(SCXOMI_DIR)/output -name *.$(PACKAGE_SUFFIX)` $(INTERMEDIATE_DIR)/
	cp `find $(SCXOMI_DIR)/output -name package_filename` $(INTERMEDIATE_DIR)/omi_package_filename

ifeq ($(PF_ARCH),ppc)
	cd $(INTERMEDIATE_DIR); tar cvf $(OUTPUT_PACKAGE_PREFIX).tar `cat $(INTERMEDIATE_DIR)/package_filename` `cat $(INTERMEDIATE_DIR)/omi_package_filename` $(OSS_KITS)
	../installer/bundle/create_bundle.sh 'PPC-RHEL' $(INTERMEDIATE_DIR) $(OUTPUT_PACKAGE_PREFIX).tar $(OUTPUT_PACKAGE_PREFIX) `cat $(INTERMEDIATE_DIR)/omi_package_filename` $(DISABLE_LISTENER)
	# Copy the shell bundle to the target directory
	cp $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).sh $(TARGET_DIR)
endif
	# We only build shell bundles for Linux (combined packages) or non-Linux platforms
ifneq ($(DISTRO_TYPE),Linux)
	cd $(INTERMEDIATE_DIR); tar cvf `cat $(INTERMEDIATE_DIR)/package_filename`.tar `cat $(INTERMEDIATE_DIR)/package_filename` `cat $(INTERMEDIATE_DIR)/omi_package_filename` $(OSS_KITS)
	../installer/bundle/create_bundle.sh $(DISTRO_TYPE) $(INTERMEDIATE_DIR) `cat $(INTERMEDIATE_DIR)/package_filename`.tar `cat $(INTERMEDIATE_DIR)/package_filename` `cat $(INTERMEDIATE_DIR)/omi_package_filename` $(DISABLE_LISTENER)
	# Remove package extension from `package_filename` file (AIX: .lpp, HP: .depot, Sun: .pkg)
	cd $(INTERMEDIATE_DIR); sed -e 's/.lpp$$//' -e 's/.depot$$//' -e 's/.pkg$$//' package_filename > package_filename.tmp; mv package_filename.tmp package_filename
	# Copy the shell bundle to the target directory
	cd $(INTERMEDIATE_DIR); cp `cat $(INTERMEDIATE_DIR)/package_filename`.sh $(TARGET_DIR)
endif # ifneq ($(DISTRO_TYPE),Linux)

else # ifneq ($(COMBINED_PACKAGES),1)

	# (Copying for combined packages)
        ifeq ($(DISABLE_LISTENER),0)
	  # Grab the OMI bits
	  cd $(INTERMEDIATE_DIR); cp $(SCXOMI_DIR)/output_openssl_0.9.8/release/omi-*.{rpm,deb} 098
	  cd $(INTERMEDIATE_DIR); cp $(SCXOMI_DIR)/output_openssl_1.0.0/release/omi-*.{rpm,deb} 100
        endif
	cd $(INTERMEDIATE_DIR); tar cvf $(OUTPUT_PACKAGE_PREFIX).tar 098/*.{rpm,deb} 100/*.{rpm,deb} $(OSS_KITS)
	../installer/bundle/create_bundle.sh $(DISTRO_TYPE) $(INTERMEDIATE_DIR) $(OUTPUT_PACKAGE_PREFIX).tar $(OUTPUT_PACKAGE_PREFIX) `cat $(SCXOMI_DIR)/output_openssl_1.0.0/release/package_filename` $(DISABLE_LISTENER)
	cp $(INTERMEDIATE_DIR)/$(OUTPUT_PACKAGE_PREFIX).sh $(TARGET_DIR)

endif # ifneq ($(COMBINED_PACKAGES),1)

# Generate scripts that are consumed by SCXCore
scx_scripts:
	python $(SCX_BRD)/installer/generate_scxcore_scripts.py \
		--OUTPUT_DIR=$(INTERMEDIATE_DIR) \
		--PF=$(PF) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--BT=$(BUILD_TYPE)

installerPackage: \
	scxcore-status $(INTERMEDIATE_DIR)/libSCXCoreProviderModule.$(PF_DYN_LIB_FILE_SUFFIX) \
	scx-tools-status scx-tools installerOnly

ssl-tool-status:
	$(ECHO) "========================= Performing make ssl-tool"

scx-tools-status:
	$(ECHO) "========================= Performing make scx-tools"

scxcore-status:
	$(ECHO) "========================= Performing make OpsMgr"

ifeq ($(PF),Linux)
GetLinuxOS: $(INTERMEDIATE_DIR)/GetLinuxOS.sh

$(INTERMEDIATE_DIR)/GetLinuxOS.sh: $(SCXPAL_TARGET_DIR)/GetLinuxOS.sh
	sed "s@<RelDir>@/etc/opt/microsoft/scx/conf@" $(SCXPAL_TARGET_DIR)/GetLinuxOS.sh > $(INTERMEDIATE_DIR)/GetLinuxOS.sh
	chmod +x $(INTERMEDIATE_DIR)/GetLinuxOS.sh
else
GetLinuxOS:
endif

#-------------------------------- End of File -----------------------------------
