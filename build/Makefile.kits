 -*- mode: Makefile; -*-
#--------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation.  All rights reserved.
#--------------------------------------------------------------------------------
# 2007-08-23
#--------------------------------------------------------------------------------

SEPOLICY_SRC_DIR=$(SCX_BRD)/installer/selinux
SEPOLICY_DIR=$(INTERMEDIATE_DIR)/selinux
SEPOLICY_DIR_EL6=$(INTERMEDIATE_DIR)/selinux.el6

OUTPUT_PACKAGE_PREFIX=
OUTPUT_BUNDLE_PREFIX=
OUTPUT_PACKAGE_SPECIFICATION_FIRST=
OUTPUT_PACKAGE_SPECIFICATION_SECOND=
WITH_SYMBOLS=withsymbols
PACKAGE_FILENAME=package_filename
STRIPPED=stripped
IS_OPENSSL_100=$(shell openssl version | grep 1.0 | wc -l)

ifeq ($(ENABLE_SCX_SECURITY_HARDENING),1)
     SECURITY_FLAG=.s
else
     SECURITY_FLAG=
endif

EXCLUDE_SECURITY_FLAG=.s

ifeq ($(PF_ARCH),x64)
    IS_OPENSSL_110=$(shell openssl version | grep 1.1 | wc -l)
    IS_OPENSSL_300=$(shell openssl version | grep 3.0 | wc -l)
endif

ifneq ($(COMBINED_PACKAGES),1)
  DATAFILES = Base_SCXCore.data $(PF_DEPENDENT_DATAFILES)
  ifeq ($(PF_ARCH),ppc)
    ifeq ($(PF_DISTRO),REDHAT)
      SCX_PREFIX=scx
      OUTPUT_PACKAGE_PREFIX=$(SCX_PREFIX)-$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH)-$(SCX_BUILDVERSION_BUILDNR).rhel.$(PF_MAJOR).$(PF_ARCH)
      OUTPUT_PACKAGE_SPECIFICATION_FIRST=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
      OUTPUT_PACKAGE_SPECIFICATION_SECOND=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
    else
      ifeq ($(PF_DISTRO),SUSE)
        SCX_PREFIX=scx
        OUTPUT_PACKAGE_PREFIX=$(SCX_PREFIX)-$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH)-$(SCX_BUILDVERSION_BUILDNR).sles.$(PF_MAJOR).$(PF_ARCH)
        OUTPUT_PACKAGE_SPECIFICATION_FIRST=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
        OUTPUT_PACKAGE_SPECIFICATION_SECOND=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
      endif
    endif
  endif
  ifeq ($(PF),SunOS)
    SCX_PREFIX=scx
    OUTPUT_PACKAGE_PREFIX=$(SCX_PREFIX)-$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH)-$(SCX_BUILDVERSION_BUILDNR).solaris.$(PF_MINOR).$(PF_ARCH)
    OUTPUT_PACKAGE_SPECIFICATION_FIRST=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
    OUTPUT_PACKAGE_SPECIFICATION_SECOND=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
  endif
  ifeq ($(PF),AIX)
    SCX_PREFIX=scx
    OUTPUT_PACKAGE_PREFIX=$(SCX_PREFIX)-$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH)-$(SCX_BUILDVERSION_BUILDNR).aix.$(PF_MAJOR).$(PF_ARCH)
    OUTPUT_PACKAGE_SPECIFICATION_FIRST=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
    OUTPUT_PACKAGE_SPECIFICATION_SECOND=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
  endif
else
  DATAFILES = Base_SCXCore.data Linux.data
  DATAFILES_R = Linux_RPM.data
  DATAFILES_D = Linux_DPKG.data

  ifneq ($(DISABLE_LISTENER),0)
    DISABLE_PORT=--DISABLE_PORT=true
    SCX_PREFIX=scx-cimprov
  else
    DISABLE_PORT=
    SCX_PREFIX=scx

    # Currently, if we have an active listener, we want OSS bits.
    # If this ever changes, we'll likely need a setting in configure script.
    ifneq ($(PF),SunOS)
      ifeq ($(PF_ARCH),x86)
        OSS_KITS:=$(shell cd $(SCX_BRD)/../opsmgr-kits; ls *-oss-test.sh *.i686.sh)
      else
        ifeq ($(PF_ARCH),x64)
          OSS_KITS:=$(shell cd $(SCX_BRD)/../opsmgr-kits; ls *-oss-test.sh *.x86_64.sh)
        endif
      endif
    endif
  endif

  OUTPUT_PACKAGE_PREFIX=$(SCX_PREFIX)-$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH)-$(SCX_BUILDVERSION_BUILDNR).universal$(SECURITY_FLAG).$(PF_ARCH)
  OUTPUT_PACKAGE_SPECIFICATION_FIRST=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
  OUTPUT_PACKAGE_SPECIFICATION_SECOND=--OUTPUTFILE=$(OUTPUT_PACKAGE_PREFIX)
endif
ifeq ($(BUILD_TYPE),Release)
  ifneq ($(OUTPUT_PACKAGE_PREFIX),)
    OUTPUT_BUNDLE_PREFIX=$(OUTPUT_PACKAGE_PREFIX).$(WITH_SYMBOLS)
  else
    OUTPUT_PACKAGE_PREFIX=scx-$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH)-$(SCX_BUILDVERSION_BUILDNR).native.$(PF_MAJOR).$(PF_ARCH)
    OUTPUT_BUNDLE_PREFIX=$(OUTPUT_PACKAGE_PREFIX)
  endif
  ifneq ($(OUTPUT_PACKAGE_SPECIFICATION_FIRST),)
    OUTPUT_PACKAGE_SPECIFICATION_FIRST:=$(OUTPUT_PACKAGE_SPECIFICATION_FIRST).$(WITH_SYMBOLS)
  endif
else
  OUTPUT_BUNDLE_PREFIX=$(OUTPUT_PACKAGE_PREFIX)
endif

DISTRO_TYPE = $(PF)
ifeq ("$(wildcard /usr/bin/dpkg-deb)","")
DPKG_LOCATION="--DPKG_LOCATION=$(SCXPAL_DIR)/installer/InstallBuilder/tools/bin/dpkg-deb-$(PF_ARCH)"
else
DPKG_LOCATION=
endif

ifeq ($(PF),Linux)
  STRIP_PATH=strip
else
  ifeq ($(PF),AIX)
    STRIP_PATH=/usr/ccs/bin/strip -X64
  else
    STRIP_PATH=/usr/ccs/bin/strip
  endif
endif

installerOnly: bundle

STAGING_DIR = $(SCX_BRD)/installer/intermediate/staging

# Easy way to just run installer (if you know all targets are built properly)
kit : GetLinuxOS scx_scripts sepolicy
	$(ECHO) "========================= Performing make installer"
	$(ECHO) PF=$(PF) > $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_DISTRO=$(PF_DISTRO) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_MAJOR=$(PF_MAJOR) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_MINOR=$(PF_MINOR) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
	$(ECHO) PF_ARCH=$(PF_ARCH) >> $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/pf_file.sh
        # The options passed to the installbuilder are inserted into the Variables list.  They will override whatever variables are specified in the datafiles.

ifneq ($(COMBINED_PACKAGES),1)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR) \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX= \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_FIRST) \
		$(DATAFILES)

	sudo rm -rf $(STAGING_DIR)
ifeq ($(BUILD_TYPE),Release)
	# copy symbol binaries to release folder
	mkdir -p $(INTERMEDIATE_DIR)_$(STRIPPED)
	cp -R $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/* $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)_$(STRIPPED)
	# strip binaries
	$(STRIP_PATH) $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)_$(STRIPPED)/* > /dev/null 2>&1|true

	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)_$(STRIPPED) \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION)_$(STRIPPED) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX= \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_SECOND) \
		$(DATAFILES)
endif

else

	# Build for COMBINED_PACKAGES (.rpm and .deb living together, mass hysteria)
	# First comes RPM symbol packages
	sudo rm -rf $(STAGING_DIR)
	rm -rf $(INTERMEDIATE_DIR)/{098,100}
	mkdir -p $(INTERMEDIATE_DIR)/{098,100}

	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/098 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_0.9.8 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_FIRST) \
		$(DATAFILES) $(DATAFILES_R)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/100 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.0.0 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_FIRST) \
		$(DATAFILES) $(DATAFILES_R)
	sudo rm -rf $(STAGING_DIR)
ifeq ($(PF_ARCH),x64)
	rm -rf $(INTERMEDIATE_DIR)/110
	mkdir -p $(INTERMEDIATE_DIR)/110
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/110 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.1.0 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_FIRST) \
		$(DATAFILES) $(DATAFILES_R)
	sudo rm -rf $(STAGING_DIR)
	rm -rf $(INTERMEDIATE_DIR)/300
	mkdir -p $(INTERMEDIATE_DIR)/300
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/300 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_3.0.0 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_FIRST) \
		$(DATAFILES) $(DATAFILES_R)
endif

	# Next comes DEB symbol packages
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/098 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_0.9.8 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_FIRST) \
		$(DATAFILES) $(DATAFILES_D)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/100 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.0.0 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_FIRST) \
		$(DATAFILES) $(DATAFILES_D)
	sudo rm -rf $(STAGING_DIR)
ifeq ($(PF_ARCH),x64)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/110 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.1.0 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_FIRST) \
		$(DATAFILES) $(DATAFILES_D)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)/300 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_3.0.0 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_FIRST) \
		$(DATAFILES) $(DATAFILES_D)
	sudo rm -rf $(STAGING_DIR)
endif

ifeq ($(BUILD_TYPE),Release)
	# copy symbol binaries to symbol folder
	mkdir -p $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)_$(STRIPPED)
	cp -R $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)/* $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)_$(STRIPPED)
	# strip binaries
	$(STRIP_PATH) $(SCX_BRD)/intermediate/$(BUILD_CONFIGURATION)_$(STRIPPED)/* > /dev/null 2>&1|true

	# Next comes RPM release packages
	rm -rf $(INTERMEDIATE_DIR)_$(STRIPPED)/{098,100}
	mkdir -p $(INTERMEDIATE_DIR)_$(STRIPPED)/{098,100}
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)_$(STRIPPED)/098 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION)_$(STRIPPED) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_0.9.8 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_SECOND) \
		$(DATAFILES) $(DATAFILES_R)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)_$(STRIPPED)/100 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION)_$(STRIPPED) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.0.0 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_SECOND) \
		$(DATAFILES) $(DATAFILES_R)
	sudo rm -rf $(STAGING_DIR)
ifeq ($(PF_ARCH),x64)
	rm -rf $(INTERMEDIATE_DIR)_$(STRIPPED)/110
	mkdir -p $(INTERMEDIATE_DIR)_$(STRIPPED)/110
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)_$(STRIPPED)/110 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION)_$(STRIPPED) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.1.0 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_SECOND) \
		$(DATAFILES) $(DATAFILES_R)
	sudo rm -rf $(STAGING_DIR)
	rm -rf $(INTERMEDIATE_DIR)_$(STRIPPED)/300
	mkdir -p $(INTERMEDIATE_DIR)_$(STRIPPED)/300
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)_$(STRIPPED)/300 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION)_$(STRIPPED) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_3.0.0 $(DISABLE_PORT) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_SECOND) \
		$(DATAFILES) $(DATAFILES_R)
endif

	# Next comes DEB release packages
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)_$(STRIPPED)/098 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION)_$(STRIPPED) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_0.9.8 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_SECOND) \
		$(DATAFILES) $(DATAFILES_D)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)_$(STRIPPED)/100 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION)_$(STRIPPED) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.0.0 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_SECOND) \
		$(DATAFILES) $(DATAFILES_D)
	sudo rm -rf $(STAGING_DIR)
ifeq ($(PF_ARCH),x64)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)_$(STRIPPED)/110 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION)_$(STRIPPED) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_1.1.0 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_SECOND) \
		$(DATAFILES) $(DATAFILES_D)
	sudo rm -rf $(STAGING_DIR)
	python $(SCXPAL_DIR)/installer/InstallBuilder/installbuilder.py \
		--BASE_DIR=$(SCX_BRD) \
		--TARGET_DIR=$(INTERMEDIATE_DIR)_$(STRIPPED)/300 \
		--INTERMEDIATE_DIR=$(SCX_BRD)/installer/intermediate \
		--STAGING_DIR=$(STAGING_DIR) \
		--OMI_DIR=$(SCXOMI_DIR) \
		--BUILD_TYPE=$(BUILD_TYPE) \
		--BUILD_CONFIGURATION=$(BUILD_CONFIGURATION)_$(STRIPPED) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--VERSION=$(SCX_BUILDVERSION_MAJOR).$(SCX_BUILDVERSION_MINOR).$(SCX_BUILDVERSION_PATCH) \
		--RELEASE=$(SCX_BUILDVERSION_BUILDNR) \
		--ULINUX_POSTFIX=/openssl_3.0.0 $(DISABLE_PORT) \
		$(DPKG_LOCATION) \
		--DATAFILE_PATH=$(SCX_BRD)/installer/datafiles \
		$(OUTPUT_PACKAGE_SPECIFICATION_SECOND) \
		$(DATAFILES) $(DATAFILES_D)
endif

endif # ifeq ($(BUILD_TYPE),Release)

endif # ifneq ($(COMBINED_PACKAGES),1)

ifeq ($(BUILD_TYPE),Release)
callgenbundle2: INTERMEDIATE_DIR:=$(INTERMEDIATE_DIR)_$(STRIPPED)
callgenbundle2: OUTPUT_BUNDLE_PREFIX:=$(OUTPUT_PACKAGE_PREFIX)
callgenbundle2: PACKAGE_FILENAME:=stripped_package_filename
callgenbundle2: genbundle2
	# Done generate the second bundle

bundle: kit genbundle1 callgenbundle2
	# Done bundle

genbundle1 genbundle2:
else
bundle: kit
        # Done bundle
endif
	mkdir -p $(TARGET_DIR)

ifneq ($(OSS_KITS),)
	# Copy OSS kit files to target directory if Linux or ULINUX
	cd $(SCX_BRD)/../opsmgr-kits; cp $(OSS_KITS) $(INTERMEDIATE_DIR); cd $(INTERMEDIATE_DIR); chmod u+wx $(OSS_KITS);
endif

	# Copy remaining kit files to target directory
ifneq ($(COMBINED_PACKAGES),1)
	# (Copying for non-combined packages)
	rm -f $(INTERMEDIATE_DIR)/omi-*.$(PACKAGE_SUFFIX)
  ifeq ($(PF),SunOS)
	cp `find $(OMIKITS_DIR) -name omi-*solaris.$(PF_MINOR).$(PF_ARCH).pkg.Z` $(INTERMEDIATE_DIR)/
	cd $(INTERMEDIATE_DIR); uncompress `ls omi-*.Z`
  endif

  ifeq ($(PF_ARCH),ppc)
    ifeq ($(PF),AIX)
	cp `find $(OMIKITS_DIR) -name omi-*aix.$(PF_MAJOR).$(PF_ARCH).lpp` $(INTERMEDIATE_DIR)/
    else
      ifeq ($(PF_DISTRO),SUSE)
	cp `find $(OMIKITS_DIR) -name omi-*suse.$(PF_MAJOR).$(PF_ARCH).rpm` $(INTERMEDIATE_DIR)/
      else
	cp `find $(OMIKITS_DIR) -name omi-*rhel.$(PF_MAJOR).$(PF_ARCH).rpm` $(INTERMEDIATE_DIR)/
      endif
    endif
  endif

  ifeq ($(PF),HPUX)
	cp `find $(OMIKITS_DIR) -name omi-*hpux.$(PF_MAJOR)*.$(PF_ARCH).depot.Z` $(INTERMEDIATE_DIR)/
	cd $(INTERMEDIATE_DIR); uncompress `ls omi-*.Z`
  endif

  # Handle Linux builds when combined packages not enabled
  ifeq ($(PF),Linux)
    ifneq ($(PF_ARCH),ppc)
	# Copy omi kit depending on openssl version
      ifeq ($(IS_OPENSSL_110),1)
	cp `find $(OMIKITS_DIR) -name omi-*ssl_110.ulinux$(SECURITY_FLAG).$(PF_ARCH).$(PACKAGE_SUFFIX)` $(INTERMEDIATE_DIR)/
      else
        ifeq ($(IS_OPENSSL_300),1)
	  cp `find $(OMIKITS_DIR) -name omi-*ssl_300.ulinux$(SECURITY_FLAG).$(PF_ARCH).$(PACKAGE_SUFFIX)` $(INTERMEDIATE_DIR)/
        else
          ifeq ($(IS_OPENSSL_100),1)
	    cp `find $(OMIKITS_DIR) -name omi-*ssl_100.ulinux$(SECURITY_FLAG).$(PF_ARCH).$(PACKAGE_SUFFIX)` $(INTERMEDIATE_DIR)/
          endif
        endif
      endif
    endif
  endif
  ifeq ($(PF),Linux)
    ifeq ($(ENABLE_SCX_SECURITY_HARDENING),1)
	cd $(INTERMEDIATE_DIR); echo `ls omi-*$(SECURITY_FLAG).$(PF_ARCH).$(PACKAGE_SUFFIX)` > omi_package_filename
    else
	cd $(INTERMEDIATE_DIR); echo `ls omi-*.$(PF_ARCH).$(PACKAGE_SUFFIX)|grep -v "$(EXCLUDE_SECURITY_FLAG).$(PF_ARCH)"` > omi_package_filename
    endif
  else
	cd $(INTERMEDIATE_DIR); echo `ls omi-*.$(PACKAGE_SUFFIX)` > omi_package_filename
  endif
  # Handle Redhat on PPC
  ifeq ($(PF_ARCH),ppc)
    ifeq ($(DISTRO_TYPE),Linux)
	cd $(INTERMEDIATE_DIR); tar cvf $(OUTPUT_BUNDLE_PREFIX).tar `cat $(INTERMEDIATE_DIR)/package_filename` `cat $(INTERMEDIATE_DIR)/omi_package_filename` $(OSS_KITS)
        ifeq ($(PF_DISTRO),REDHAT)
	   ../installer/bundle/create_bundle.sh 'PPC-RHEL' $(INTERMEDIATE_DIR) $(OUTPUT_BUNDLE_PREFIX).tar $(OUTPUT_BUNDLE_PREFIX) `cat $(INTERMEDIATE_DIR)/omi_package_filename` $(DISABLE_LISTENER)
        else
	   ../installer/bundle/create_bundle.sh 'PPC-SUSE' $(INTERMEDIATE_DIR) $(OUTPUT_BUNDLE_PREFIX).tar $(OUTPUT_BUNDLE_PREFIX) `cat $(INTERMEDIATE_DIR)/omi_package_filename` $(DISABLE_LISTENER)
        endif   
	# Copy the shell bundle to the target directory
	cp $(INTERMEDIATE_DIR)/$(OUTPUT_BUNDLE_PREFIX).sh $(TARGET_DIR)
    endif # ifeq ($(DISTRO_TYPE),Linux)
  endif # ifeq ($(PF_ARCH),ppc)

  # We only build shell bundles for Linux (combined packages) or non-Linux platforms
  ifneq ($(DISTRO_TYPE),Linux)
	cd $(INTERMEDIATE_DIR); tar cvf `cat $(INTERMEDIATE_DIR)/package_filename`.tar `cat $(INTERMEDIATE_DIR)/package_filename` `cat $(INTERMEDIATE_DIR)/omi_package_filename` $(OSS_KITS)
	../installer/bundle/create_bundle.sh $(DISTRO_TYPE) $(INTERMEDIATE_DIR) `cat $(INTERMEDIATE_DIR)/package_filename`.tar `cat $(INTERMEDIATE_DIR)/package_filename` `cat $(INTERMEDIATE_DIR)/omi_package_filename` $(DISABLE_LISTENER)
	# Remove package extension from `package_filename` file (AIX: .lpp, HP: .depot, Sun: .pkg)
	cd $(INTERMEDIATE_DIR); sed -e 's/.lpp$$//' -e 's/.depot$$//' -e 's/.pkg$$//' package_filename > package_filename.tmp; mv package_filename.tmp package_filename
        ifeq ($(BUILD_TYPE),Release)
	  # Generate the symbol shell bundle
	  test "${PACKAGE_FILENAME}" = "stripped_package_filename" && echo -n `cat $(INTERMEDIATE_DIR)/package_filename` > $(INTERMEDIATE_DIR)/stripped_package_filename || true
	  test "${PACKAGE_FILENAME}" = "stripped_package_filename" && mv $(INTERMEDIATE_DIR)/`cat $(INTERMEDIATE_DIR)/package_filename`.sh $(INTERMEDIATE_DIR)/`cat $(INTERMEDIATE_DIR)/stripped_package_filename`.sh || true
        endif
	# Copy the shell bundle to the target directory
	cd $(INTERMEDIATE_DIR); cp `cat $(INTERMEDIATE_DIR)/$(PACKAGE_FILENAME)`.sh $(TARGET_DIR)
  endif # ifneq ($(DISTRO_TYPE),Linux)

else # ifneq ($(COMBINED_PACKAGES),1)

	# (Copying for combined packages)
        ifeq ($(DISABLE_LISTENER),0)
	  # Grab the OMI bits
          ifeq ($(ENABLE_SCX_SECURITY_HARDENING),1)
	    cd $(INTERMEDIATE_DIR); cp $(OMIKITS_DIR)/omi-*ssl_100*$(SECURITY_FLAG).$(PF_ARCH).{rpm,deb} 100
            ifeq ($(PF_ARCH),x64)
	       cd $(INTERMEDIATE_DIR); cp $(OMIKITS_DIR)/omi-*ssl_110*$(SECURITY_FLAG).$(PF_ARCH).{rpm,deb} 110
	       cd $(INTERMEDIATE_DIR); cp $(OMIKITS_DIR)/omi-*ssl_300*$(SECURITY_FLAG).$(PF_ARCH).{rpm,deb} 300
            endif
          else
	    cd $(INTERMEDIATE_DIR); cp `ls $(OMIKITS_DIR)/omi-*ssl_100*.$(PF_ARCH).{rpm,deb}|grep -v "$(EXCLUDE_SECURITY_FLAG).$(PF_ARCH)"` 100
            ifeq ($(PF_ARCH),x64)
	        cd $(INTERMEDIATE_DIR); cp `ls $(OMIKITS_DIR)/omi-*ssl_110*.$(PF_ARCH).{rpm,deb}|grep -v "$(EXCLUDE_SECURITY_FLAG).$(PF_ARCH)"` 110
		cd $(INTERMEDIATE_DIR); cp `ls $(OMIKITS_DIR)/omi-*ssl_300*.$(PF_ARCH).{rpm,deb}|grep -v "$(EXCLUDE_SECURITY_FLAG).$(PF_ARCH)"` 300
            endif
          endif

          # Remove ssl_098, ssl_100 and ssl_110 from omi filename
	  cd $(INTERMEDIATE_DIR)/100; mv omi-*.deb `ls omi-*.deb | sed "s/\.ssl_100\./\./g"`
	  cd $(INTERMEDIATE_DIR)/100; mv omi-*.rpm `ls omi-*.rpm | sed "s/\.ssl_100\./\./g"`
          ifeq ($(PF_ARCH),x64)
	     cd $(INTERMEDIATE_DIR)/110; mv omi-*.deb `ls omi-*.deb | sed "s/\.ssl_110\./\./g"`
	     cd $(INTERMEDIATE_DIR)/110; mv omi-*.rpm `ls omi-*.rpm | sed "s/\.ssl_110\./\./g"`
	     cd $(INTERMEDIATE_DIR)/300; mv omi-*.deb `ls omi-*.deb | sed "s/\.ssl_300\./\./g"`
	     cd $(INTERMEDIATE_DIR)/300; mv omi-*.rpm `ls omi-*.rpm | sed "s/\.ssl_300\./\./g"`
          endif
	  cd $(INTERMEDIATE_DIR)/100; echo `ls omi-*.deb` > omi_package_filename
        endif
        ifeq ($(PF_ARCH),x64)
	   cd $(INTERMEDIATE_DIR); tar cvf $(OUTPUT_BUNDLE_PREFIX).tar 100/*.{rpm,deb} 110/*.{rpm,deb} 300/*.{rpm,deb} $(OSS_KITS)
        else
	   cd $(INTERMEDIATE_DIR); tar cvf $(OUTPUT_BUNDLE_PREFIX).tar 100/*.{rpm,deb} $(OSS_KITS)
        endif
	../installer/bundle/create_bundle.sh $(DISTRO_TYPE) $(INTERMEDIATE_DIR) $(OUTPUT_BUNDLE_PREFIX).tar $(OUTPUT_BUNDLE_PREFIX) `cat $(INTERMEDIATE_DIR)/100/omi_package_filename` $(DISABLE_LISTENER)
	cp $(INTERMEDIATE_DIR)/$(OUTPUT_BUNDLE_PREFIX).sh $(TARGET_DIR)

endif # ifneq ($(COMBINED_PACKAGES),1)

# Generate scripts that are consumed by SCXCore
scx_scripts:
	python $(SCX_BRD)/installer/generate_scxcore_scripts.py \
		--OUTPUT_DIR=$(INTERMEDIATE_DIR) \
		--PF=$(PF) \
		--PFARCH=$(PF_ARCH) \
		--PFMAJOR=$(PF_MAJOR) \
		--PFMINOR=$(PF_MINOR) \
		--BT=$(BUILD_TYPE)

installerPackage: \
	scxcore-status $(INTERMEDIATE_DIR)/libSCXCoreProviderModule.$(PF_DYN_LIB_FILE_SUFFIX) \
	scx-tools-status scx-tools installerOnly

ssl-tool-status:
	$(ECHO) "========================= Performing make ssl-tool"

scx-tools-status:
	$(ECHO) "========================= Performing make scx-tools"

scxcore-status:
	$(ECHO) "========================= Performing make OpsMgr"

ifeq ($(PF),Linux)
GetLinuxOS: $(INTERMEDIATE_DIR)/GetLinuxOS.sh

$(INTERMEDIATE_DIR)/GetLinuxOS.sh: $(SCXPAL_TARGET_DIR)/GetLinuxOS.sh
	sed "s@<RelDir>@/etc/opt/microsoft/scx/conf@" $(SCXPAL_TARGET_DIR)/GetLinuxOS.sh > $(INTERMEDIATE_DIR)/GetLinuxOS.sh
	chmod +x $(INTERMEDIATE_DIR)/GetLinuxOS.sh
else
GetLinuxOS:
endif

# Build SELinux policy modules for scxagent-logrotate
ifeq ($(PF),Linux)
    sepolicy: $(SEPOLICY_DIR)/scxagent-logrotate.pp $(SEPOLICY_DIR_EL6)/scxagent-logrotate.pp
else
    sepolicy:
endif

$(SEPOLICY_DIR)/scxagent-logrotate.pp : $(SEPOLICY_SRC_DIR)/scxagent-logrotate.te $(SEPOLICY_SRC_DIR)/scxagent-logrotate.fc
	@echo "========================= Building selinux policy module for scxagent-logrotate"
	$(MKPATH) $(SEPOLICY_DIR)
	$(COPY) $(SEPOLICY_SRC_DIR)/scxagent-logrotate.te $(SEPOLICY_SRC_DIR)/scxagent-logrotate.fc $(SEPOLICY_DIR)
	cd $(SEPOLICY_DIR); make -f /usr/share/selinux/devel/Makefile

$(SEPOLICY_DIR_EL6)/scxagent-logrotate.pp : $(SEPOLICY_SRC_DIR)/scxagent-logrotate.el6.te $(SEPOLICY_SRC_DIR)/scxagent-logrotate.fc
	@echo "========================= Building EL6 selinux policy module for scxagent-logrotate"
	$(MKPATH) $(SEPOLICY_DIR_EL6)
	$(COPY) $(SEPOLICY_SRC_DIR)/scxagent-logrotate.el6.te $(SEPOLICY_DIR_EL6)/scxagent-logrotate.te
	$(COPY) $(SEPOLICY_SRC_DIR)/scxagent-logrotate.fc $(SEPOLICY_DIR_EL6)
	cd $(SEPOLICY_DIR_EL6); make -f /usr/share/selinux/devel/Makefile

#-------------------------------- End of File -----------------------------------
