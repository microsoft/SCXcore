#!/bin/bash

scxpal_dir="../../pal"
scxomi_dir=`(cd ../../omi/Unix; pwd -P)`
build_type="Release"
enable_debug=""
enable_purify_agent=""
enable_purify_server=""
enable_bullseye=""
combined_packages=0

enable_ulinux_qual=""
omi_configure_quals="--prefix=/opt/omi --localstatedir=/var/opt/omi --sysconfdir=/etc/opt/omi/conf --certsdir=/etc/opt/omi/ssl"

if [ ! -d "$scxpal_dir" ]; then
    echo "PAL directory ($scxpal_dir) does not exist"
    exit 1
fi

if [ ! -d "$scxomi_dir" ]; then
    echo "OMI directory ($scxomi_dir) does not exist"
    exit 1
fi

for opt
do

  arg=`expr "x$opt" : 'x[^=]*=\(.*\)'`

  case $opt in

    -h | --help)
      help=1
    ;;

    --enable-debug)
      if [ "$build_type" = "Bullseye" ]; then
          echo "Cannot build debug if Bullseye is enabled"
          exit 1
      fi
      build_type="Debug"
      enable_debug="--enable-debug"
    ;;

    --enable-bullseye)
      if [ "$build_type" = "Debug" ]; then
          echo "Cannot build Bullseye if debug is enabled"
          exit 1
      fi
      build_type="Bullseye"
      enable_bullseye="--enable-bullseye"
    ;;

    --enable-purify-agent)
      enable_purify_agent="--enable-purify-agent"
    ;;

    --enable-purify-server)
      enable_purify_server="--enable-purify-server"
    ;;

    --enable-local-omi)
      omi_configure_quals="--prefix=. --disable-libpath"
      local_omi="1"
    ;;

    --enable-ulinux)
      if [ ! -d "/usr/local_ssl_0.9.8" -o ! -d "/usr/local_ssl_1.0.0" ]; then
          echo "Cannot build ULINUX without Universal SSL libraries"
          exit 1
      fi
      enable_ulinux_qual="--enable-ulinux"
      combined_packages=1
    ;;

    *)
      echo "configure: invalid option '$opt'"
      echo "Try configure --help' for more information."
      exit 1
    ;;

  esac

done

if [ "$help" = "1" ]; then

    cat<<EOF

Usage: ./configure [OPTIONS]

OVERVIEW:

This script configures SCXOM for building. Type the following commands.

    $ ./configure
    $ make

OPTIONS:
    -h, --help                  Print this help message.
    --enable-debug              Perform a debug build.
    --enable-purify-agent       Allow agent to be run with purify (memory leak detection)
    --enable-purify-server      Allow server to be run with purify (memory leak detection)
    --enable-local-omi          Allow local OMI commands to be issued (not for use when building a kit)
    --enable-bullseye           Enables the use of code coverage tools (Bullseye).
    --enable-ulinux             Force provider-only, universal RPM/DEB kits

EOF
    exit 0
fi

(cd $scxpal_dir/build/ && chmod ug+x ./configure; ./configure $enable_debug $enable_bullseye $enable_ulinux_qual)

omi_configure_quals="--enable-preexec ${enable_debug} ${enable_purify_agent} ${enable_purify_server} ${omi_configure_quals}"

##==============================================================================
##
## openssl variables
##
##==============================================================================

pkgconfig=`which pkg-config`

openssl_cflags=`$pkgconfig --cflags openssl`
openssl_libs=`$pkgconfig --libs openssl`
openssl_libdir=`$pkgconfig --variable=libdir openssl`


FORCE_UNIVERSAL=$combined_packages
if [ -d "/usr/local_ssl_0.9.8" -a -d "/usr/local_ssl_1.0.0" ]; then
    FORCE_UNIVERSAL=1
fi

if [ $FORCE_UNIVERSAL -ne 0 ]; then
    case "`uname -m`" in    
	x86_64 )
            openssl098_libdir=/usr/local_ssl_0.9.8/lib
            openssl100_libdir=/usr/local_ssl_1.0.0/lib64
            ;;
	
	* )
            openssl098_libdir=/usr/local_ssl_0.9.8/lib
            openssl100_libdir=/usr/local_ssl_1.0.0/lib
            ;;
    esac
    openssl098_cflags=`PKG_CONFIG_PATH=$openssl098_libdir/pkgconfig $pkgconfig --cflags openssl`
    openssl098_libs=`PKG_CONFIG_PATH=$openssl098_libdir/pkgconfig $pkgconfig --libs openssl`
    openssl100_cflags=`PKG_CONFIG_PATH=$openssl100_libdir/pkgconfig $pkgconfig --cflags openssl`
    openssl100_libs=`PKG_CONFIG_PATH=$openssl100_libdir/pkgconfig $pkgconfig --libs openssl`
fi

cat <<EOF > config.mak
COMBINED_PACKAGES=$combined_packages
LOCAL_OMI=$local_omi
OMI_CONFIGURE_QUALS=$omi_configure_quals
OPENSSL_CFLAGS=$openssl_cflags
OPENSSL_LIBS=$openssl_libs
OPENSSL_LIBDIR=$openssl_libdir
OPENSSL098_CFLAGS=$openssl098_cflags
OPENSSL098_LIBS=$openssl098_libs
OPENSSL098_LIBDIR=$openssl098_libdir
OPENSSL100_CFLAGS=$openssl100_cflags
OPENSSL100_LIBS=$openssl100_libs
OPENSSL100_LIBDIR=$openssl100_libdir
EOF

# Fix permissions in case they aren't executable - and then configure OMI
chmod ug+x ${scxomi_dir}/configure ${scxomi_dir}/buildtool
(cd ${scxomi_dir} && ./configure ${omi_configure_quals})
