#!/bin/sh
#
#
# This script is a skeleton bundle file for primary platforms (Redhat, SUSE,
# AIX, HP, and Solaris).  It should not be used for secondary platforms (such
# as ULINUX); these have a separate bundle file.
#
# Use this script by concatenating it with some binary package.
#
# The bundle is created by cat'ing the script in front of the binary, so for
# the gzip'ed tar example, a command like the following will build the bundle:
#
#     tar -czvf - <target-dir> | cat sfx.skel - > my.bundle
#
# The bundle can then be copied to a system, made executable (chmod +x) and
# then run.  When run without any options it will make any pre-extraction
# calls, extract the binary, and then make any post-extraction calls.
#
# This script has some usefull helper options to split out the script and/or
# binary in place, and to turn on shell debugging.
#
# This script is paired with create_bundle.sh, which will edit constants in
# this script for proper execution at runtime.  The "magic", here, is that
# create_bundle.sh encodes the length of this script in the script itself.
# Then the script can use that with 'tail' in order to strip the script from
# the binary package.
#
# Developer note: A prior incarnation of this script used 'sed' to strip the
# script from the binary package.  That didn't work on AIX 5, where 'sed' did
# strip the binary package - AND null bytes, creating a corrupted stream.

set -e
PATH=/usr/bin:/bin
umask 022

# Can't use something like 'readlink -e $0' because that doesn't work everywhere
# And HP doesn't define $PWD in a sudo environment, so we define our own
PWD="`pwd`"

SCRIPT_INDIRECT="`dirname $PWD/$0`"
SCRIPT_DIR="`(cd \"$SCRIPT_INDIRECT\"; pwd -P)`"
SCRIPT="$SCRIPT_DIR/`basename $0`"

# These symbols will get replaced during the bundle creation process.
#
# The PLATFORM symbol should contain ONE of the following:
#	linux, aix, hpux, sun
# (It is assumed that, from an installation perspective, RHEL and SUSE are
# identical).
#
# The OM_PKG symbol should contain something like:
#	scx-1.5.1-115.rhel.6.x64.rpm

PLATFORM=<PLATFORM_TYPE>
OM_PKG=<OM_PKG>
SCRIPT_LEN=<SCRIPT_LEN>
SCRIPT_LEN_PLUS_ONE=<SCRIPT_LEN+1>


usage()
{
    echo "usage: $1 [OPTIONS]"
    echo "Options:"
    echo "  --force                Force upgrade (override version checks)."
    echo "  --install              Install the package from the system."
    echo "  --purge                Uninstall the package and remove all related data."
    echo "  --remove               Uninstall the package from the system."
    echo "  --upgrade              Upgrade the package in the system."
    echo "  --debug                use shell debug mode."
    echo "  -? | --help            shows this usage text."
}


verifyNoInstallationOption()
{
    if [ -n "${installMode}" ]; then
	echo "$0: Conflicting qualifiers, exiting" >&2
	exit 1
    fi

    return;
}

# Only Solaris doesn't allow the -n qualifier in 'tail' command
[ "$PLATFORM" != "sun" ] && TAIL_CQUAL="-n"

while [ $# -ne 0 ]
do
    case "$1" in
	--extract-script)
	    # hidden option, not part of usage
	    # echo "  --extract-script FILE  extract the script to FILE."
	    head -${SCRIPT_LEN} "${SCRIPT}" > "$2"
	    local shouldexit=true
	    shift 2
	    ;;

	--extract-binary)
	    # hidden option, not part of usage
	    # echo "  --extract-binary FILE  extract the binary to FILE."
	    tail $TAIL_CQUAL +${SCRIPT_LEN_PLUS_ONE} "${SCRIPT}" > "$2"
	    local shouldexit=true
	    shift 2
	    ;;

	--force)
	    forceFlag=true
	    shift 1
	    ;;

	--install)
	    verifyNoInstallationOption
	    installMode=I
	    shift 1
	    ;;

	--purge)
	    verifyNoInstallationOption
	    installMode=P
	    shouldexit=true
	    shift 1
	    ;;

	--remove)
	    verifyNoInstallationOption
	    installMode=R
	    shouldexit=true
	    shift 1
	    ;;

	--upgrade)
	    verifyNoInstallationOption
	    installMode=U
	    shift 1
	    ;;

	--debug)
	    echo "Starting shell debug mode." >&2
	    echo "" >&2
	    echo "SCRIPT_INDIRECT: $SCRIPT_INDIRECT" >&2
	    echo "SCRIPT_DIR:      $SCRIPT_DIR" >&2
	    echo "SCRIPT:          $SCRIPT" >&2
	    echo >&2
	    set -x
	    shift 1
	    ;;

	-? | --help)
	    usage `basename $0` >&2
	    exit 0
	    ;;

	*)
	    usage `basename $0` >&2
	    exit 1
	    ;;
    esac
done

# Determine install/deinstall command lines

case "$PLATFORM" in
    linux|ulinux-r)
	[ -n "${forceFlag}" ] && FORCE="--force"
	PKG_ADD="rpm --install $OM_PKG"
	PKG_RM="rpm --erase scx"
	PKG_UPD="rpm --upgrade $FORCE $OM_PKG"
	;;

    ulinux-d)
	[ -z "${forceFlag}" ] && FORCE="--refuse-downgrade"
	PKG_ADD="dpkg --install --refuse-downgrade $OM_PKG"
	if [ "$installMode" = "P" ]; then
	    PKG_RM="dpkg --purge scx"
	else
	    PKG_RM="dpkg --remove scx"
	fi
	PKG_UPD="dpkg --install $FORCE $OM_PKG"

	export PATH=/usr/local/sbin:/usr/sbin:/sbin:$PATH
	;;

    aix)
	[ -n "${forceFlag}" ] && FORCE="-F"
	PKG_ADD="/usr/sbin/installp -X -d $OM_PKG scx.rte"
	PKG_RM="/usr/sbin/installp -u scx.rte"
	PKG_UPD="/usr/sbin/installp -X $FORCE -d $OM_PKG scx.rte"
	;;

    hpux)
	[ -n "${forceFlag}" ] && FORCE="-x allow_downdate=true -x reinstall=true"
	PKG_ADD="/usr/sbin/swinstall -s $PWD/$OM_PKG scx"
	PKG_RM="/usr/sbin/swremove scx"
	PKG_UPD="/usr/sbin/swinstall $FORCE -s $PWD/$OM_PKG scx"
	;;

    sun)
	# No notion of "--force" since Sun package has no notion of update
	PKG_ADD="/usr/sbin/pkgadd -a scx-admin -n -d $OM_PKG MSFTscx"
	PKG_RM="/usr/sbin/pkgrm -a scx-admin -n MSFTscx"
	PKG_UPD="$PKG_ADD"
	;;

    *)
	echo "Invalid platform encoded in variable \$PACKAGE; aborting" >&2
	exit 2
esac

# Create installation administrative file for Solaris platform if needed
CLEANUP=""
if [ "$PLATFORM" = "sun" ]; then
    CLEANUP='rm -f scx-admin'
    echo "mail=" > scx-admin
    echo "instance=overwrite" >> scx-admin
    echo "partial=nocheck" >> scx-admin
    echo "idepend=quit" >> scx-admin
    echo "rdepend=quit" >> scx-admin
    echo "conflict=nocheck" >> scx-admin
    echo "action=nocheck" >> scx-admin
    echo "basedir=default" >> scx-admin
fi

# Do we need to remove the package?

if [ "$installMode" = "R" -o "$installMode" = "P" ]
then
    echo "Removing cross-platform agent ..."
    set +e
    ${PKG_RM}
    EXIT_STATUS=$?
    ${CLEANUP}
    [ $EXIT_STATUS -ne 0 ] && exit $EXIT_STATUS
    set -e

    if [ "$installMode" = "P" ]
    then
	echo "Purging all files in cross-platform agent ..."
	rm -rf /etc/opt/microsoft/scx /opt/microsoft/scx /var/opt/microsoft/scx
    fi
fi

if [ -n "${shouldexit}" ]
then
    # when extracting script/tarball don't also install
    ${CLEANUP}
    exit 0
fi

#
# Do stuff before extracting the binary here, for example test [ `id -u` -eq 0 ],
# validate space, platform, uninstall a previous version, backup config data, etc...
#

#
# Extract the binary here.
#

echo "Extracting..."

case "$PLATFORM" in
    linux|ulinux-d|ulinux-r)
	tail -n +${SCRIPT_LEN_PLUS_ONE} "${SCRIPT}" | tar xzf -
	;;

    aix)
	tail -n +${SCRIPT_LEN_PLUS_ONE} "${SCRIPT}" | gunzip -c | tar xf -
	;;

    hpux|sun)
	tail $TAIL_CQUAL +${SCRIPT_LEN_PLUS_ONE} "${SCRIPT}" | zcat - | tar xf -
	;;

    *)
	echo "Invalid platform encoded in variable \$PACKAGE; aborting" >&2
	${CLEANUP}
	exit 2
esac

STATUS=$?
if [ ${STATUS} -ne 0 ]
then
    echo "Failed: could not extract the install bundle."
    ${CLEANUP}
    exit ${STATUS}
fi

# Default behavior is to extract the bundle and then exit

[ -z "$installMode" ] && ${CLEANUP} && exit 0

#
# Do stuff after extracting the binary here, such as actually installing the package.
#

set +e
EXIT_STATUS=0

case "$installMode" in
    I)
	echo "Installing cross-platform agent ..."
	if [ "$PLATFORM" = "sun" ]; then
	    /usr/bin/pkginfo MSFTscx > /dev/null 2>&1
	    if [ $? -eq 0 ]; then
		echo "ERROR: SCX package is already installed"
		rm $OM_PKG
		exit 2
	    fi
	fi
	${PKG_ADD}
	EXIT_STATUS=$?
	;;

    U)
	echo "Updating cross-platform agent ..."
	if [ "$PLATFORM" = "sun" ]; then
	    /usr/bin/pkginfo MSFTscx > /dev/null 2>&1
	    [ $? -eq 0 ] && ${PKG_RM}
	fi
	${PKG_UPD}
	EXIT_STATUS=$?
	;;

    *)
	echo "$0: Invalid setting of variable \$installMode, exiting" >&2
	${CLEANUP}
	exit 2
esac

${CLEANUP}

# Remove the package that was extracted as part of the bundle
# NOTE: Should we run in a temporary directory to not blow away any existing package in pwd?

rm $OM_PKG

exit $EXIT_STATUS

#####>>- This must be the last line of this script, followed by a single empty line. -<<#####
