%Variables
SHELL_HEADER:            '#!/bin/sh'
SCXHOME:                 '/opt/microsoft/scx'
SCX_TMP_PATH:            '/var/opt/microsoft/scx/tmp'
PAM_COMMENT:             '# The configuration of omi is generated by the scx installer.'
PAM_COMMENT_CLOSING:     '# End of section generated by the scx installer.'
PAM_SCX_COMMENT:         '# The configuration of scx is generated by the scx installer.'
PAM_CONF_FILE:           '/etc/pam.conf'
PAM_CONF_DIR:            '/etc/pam.d'
RUNAS_CFG:               '/etc/opt/microsoft/scx/conf/scxrunas.conf'
SSL_DIR:                 '/etc/opt/microsoft/scx/ssl'
GENCERT_CERT_FILE:       'scx-host-`uname -n`.pem'
SCX_SSL_CONFIG:          '/opt/microsoft/scx/bin/tools/scxsslconfig'
SUNOS_PKGSAVE:           ''
SCX_LOC:                 '/etc/opt/microsoft/scx/conf/sudodir'
SUDO_DIR:                '/usr/bin'
ROOT_GROUP_NAME:         'root'
SHLIB_EXT:               'so'

SHORT_NAME:              'scx'
SHORT_NAME_PREFIX:       'MSFT'
LONG_NAME:               'Microsoft System Center 2012 Operations Manager for UNIX/Linux agent'
GROUP:                   'Applications/System'
LICENSE:                 'none'
VENDOR:                  'http://www.microsoft.com'
PROVIDES:                'cim-server'
DESCRIPTION:             'Microsoft CIM server for System Center 2012 Operations Manager.'
MAINTAINER:              'Microsoft Corporation'

%Defines

%Files
#ifndef ULINUX
/opt/microsoft/scx/bin/setup.sh;                                        intermediate/${{BUILD_CONFIGURATION}}/scx_setup.sh;               644; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/setup.sh;                                  intermediate/${{BUILD_CONFIGURATION}}/scx_setup_tools.sh;         644; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/scxadmin;                                  intermediate/${{BUILD_CONFIGURATION}}/scxadmin.sh;                755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/scxsslconfig;                              intermediate/${{BUILD_CONFIGURATION}}/scxsslconfig.sh;            755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/omiagent;                                        ${{OMI_DIR}}/output/bin/omiagent;                                 755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/omiserver;                                       ${{OMI_DIR}}/output/bin/omiserver;                                755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/omicli;                                    ${{OMI_DIR}}/output/bin/omicli;                                   755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/.scxsslconfig;                             target/${{BUILD_CONFIGURATION}}/scxsslconfig;                     755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/.scxadmin;                                 target/${{BUILD_CONFIGURATION}}/scxadmin;                         755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/scxlogfilereader;                                target/${{BUILD_CONFIGURATION}}/scxlogfilereader;                 755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/lib/libmicxx.${{SHLIB_EXT}};                         ${{OMI_DIR}}/output/lib/libmicxx.${{SHLIB_EXT}};                  755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/lib/libomiclient.${{SHLIB_EXT}};                     ${{OMI_DIR}}/output/lib/libomiclient.${{SHLIB_EXT}};              755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/lib/libomiidentify.${{SHLIB_EXT}};                   ${{OMI_DIR}}/output/lib/libomiidentify.${{SHLIB_EXT}};            755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/lib/libSCXCoreProviderModule.${{SHLIB_EXT}};         target/${{BUILD_CONFIGURATION}}/libSCXCoreProviderModule.${{SHLIB_EXT}}; 755; root; ${{ROOT_GROUP_NAME}}
#endif

/etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup;                 installer/conf/omi/omiserver.conf;                                444; root; sys
/etc/opt/microsoft/scx/conf/omicli.conf;                                installer/conf/omi/omicli.conf;                                   444; root; sys
/etc/opt/microsoft/scx/conf/omiregister/root-scx/SCXProvider-root.reg;  installer/conf/omi/SCXProvider-root.reg;                          755; root; ${{ROOT_GROUP_NAME}} 
/etc/opt/microsoft/scx/conf/omiregister/root-scx/SCXProvider-req.reg;   installer/conf/omi/SCXProvider-req.reg;                           755; root; ${{ROOT_GROUP_NAME}} 
/etc/opt/microsoft/scx/conf/omiregister/root-omi/omiidentify.reg;       ${{OMI_DIR}}/etc/omiregister/root-omi/omiidentify.reg;            755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/conf/scxlog.conf;                                installer/conf/scxlog.conf;                                       644; root; ${{ROOT_GROUP_NAME}}; conffile
/etc/opt/microsoft/scx/conf/scxrunas.conf;                              installer/conf/scxrunas.conf;                                     644; root; ${{ROOT_GROUP_NAME}}; conffile
/etc/opt/microsoft/scx/conf/installinfo.txt;                            installer/conf/installinfo.txt;                                   644; root; ${{ROOT_GROUP_NAME}}

%Links
%% Create a link to make scxadmin easier to run ...
%%
%% On Solaris 5.10 and later, we deal with the /usr/sbin/scxadmin link via postinstall;
%% This is to allow zones to work properly for sparse root zones
#if PF != SunOS
/usr/sbin/scxadmin;                                                     ../../opt/microsoft/scx/bin/tools/scxadmin;                       755; root; ${{ROOT_GROUP_NAME}}
#elseif PFMINOR <= 9
/usr/sbin/scxadmin;                                                     ../../opt/microsoft/scx/bin/tools/scxadmin;                       755; root; ${{ROOT_GROUP_NAME}}
#endif

%Directories
/usr;                                                   755; root; ${{ROOT_GROUP_NAME}}; sysdir
/usr/sbin;                                              755; root; ${{ROOT_GROUP_NAME}}; sysdir
/opt;                                                   755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc;                                                   755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc/opt;                                               755; root; ${{ROOT_GROUP_NAME}}; sysdir
/var;                                                   755; root; ${{ROOT_GROUP_NAME}}; sysdir
/var/opt;                                               755; root; ${{ROOT_GROUP_NAME}}; sysdir
/opt/microsoft;                                         755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx;                                     755; root; ${{ROOT_GROUP_NAME}}

#ifndef ULINUX
/opt/microsoft/scx/bin;                                 755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools;                           755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/lib;                                 755; root; ${{ROOT_GROUP_NAME}}
#endif

/etc/opt/microsoft;                                     755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx;                                 755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/conf;                            755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/conf/.baseconf;                  755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/conf/omiregister;                755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/conf/omiregister/root-omi;       755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/conf/omiregister/root-scx;       755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/ssl;                             755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft;                                     755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx;                                 755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/log;                             755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/lib;                             755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/lib/state;                       755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/run;                             755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/tmp;                             755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/omiauth;                         755; root; ${{ROOT_GROUP_NAME}}
/etc/init.d;                                            755; root; sys; sysdir

%Dependencies

%DeleteSoftLinkToSudo
DeleteSoftLinkToSudo() {
    if [ -L ${{SCX_LOC}} ]; then
        LINKED_DIR=`(cd ${{SCX_LOC}} ; pwd -P)`
        [ x${LINKED_DIR} = x${{SUDO_DIR}} ] && rm ${{SCX_LOC}}
    fi
}

%GetNewPAMConfig_funcs
GetNewPAMConfig_file() {
    #
    # Get configuration for sshd, service modules types auth and account
    #
    sshd_conf=`egrep "^[# ]*sshd[ 	]+(auth|account)" ${{PAM_CONF_FILE}}`
    if [ $? -ne 0 ]; then
        # No match found
        # sshd not explicitly configured.
        # Check to see if "other" is configured
        other_conf=`egrep "^[# ]*other[ 	]+(auth|account)" ${{PAM_CONF_FILE}}`
        if [ $? -eq 0 ]; then
            # "other" was found - use that (do not write any sort of new PAM configuraton)
            return 0
        fi
        # Use passwd

#ifndef ULINUX
        sshd_conf=`printf "${{pam_file_passwd}}"`

#else
        if [ -e "/etc/debian_version" ]; then
            sshd_conf=`printf "${{pam_file_passwd_ubuntu}}"`
        elif [ ! -e "/etc/sysconfig/networking" ] && [ ! -e"/etc/sysconfig/network-scripts"]; then
            sshd_conf=`printf "${{pam_file_passwd_suse}}"`
        else
            sshd_conf=`printf "${{pam_file_passwd_redhat}}"`
        fi
#endif
    fi

    #
    # Substitute sshd with omi.
    #
    omi_conf=`echo "$sshd_conf" | sed "s/sshd/omi/g"`
    if [ $? -ne 0 ]; then
        echo "can't parse ${{PAM_CONF_FILE}}"
        return 1
    fi
}

GetNewPAMConfig_dir() {
    #
    # Get configuration for sshd, service modules types auth and account
    #
    sshd_conf=`egrep "(auth|account)" ${{PAM_CONF_DIR}}/sshd 2> /dev/null`
    if [ $? -ne 0 ]; then
        # No match found
        # sshd not explicitly configured.
        # Use passwd

#ifndef ULINUX
        sshd_conf=`printf "${{pam_dir_passwd}}"`
#else
        if [ -e "/etc/debian_version" ]; then
            sshd_conf=`printf "${{pam_dir_passwd_ubuntu}}"`
        elif [ ! -e "/etc/sysconfig/networking" ] && [ ! -e"/etc/sysconfig/network-scripts"]; then
            sshd_conf=`printf "${{pam_dir_passwd_suse}}"`
        else
            sshd_conf=`printf "${{pam_dir_passwd_redhat}}"`
        fi
#endif
    fi

    omi_conf=$sshd_conf
}

%UnconfigureScxPAM
# UnconfigureScxPAM
#
# Check if pam is configured with single
# configuration file or with configuration
# directory.
#
UnconfigureScxPAM() {
    if [ -s ${{PAM_CONF_FILE}} ]; then
        UnconfigureScxPAM_file
    elif [ -d ${{PAM_CONF_DIR}} ]; then
        UnconfigureScxPAM_dir
    fi
    return 0
}

UnconfigureScxPAM_file() {
    # Configured with single file
    #
    # Get all lines except scx configuration
    #
    pam_configuration=`grep -v "^[#	]*scx" ${{PAM_CONF_FILE}} | grep -v "${{PAM_SCX_COMMENT}}" | grep -v "${{PAM_COMMENT_CLOSING}}"`
    if [ $? -ne 0 ]; then
        # scx not configured in PAM
        return 0
    fi
    #
    # Write it back (to the copy first)
    #
    cp -p ${{PAM_CONF_FILE}} ${{PAM_CONF_FILE}}.tmp
    echo "$pam_configuration" > ${{PAM_CONF_FILE}}.tmp
    if [ $? -ne 0 ]; then
        echo "can't write to ${{PAM_CONF_FILE}}.tmp"
        return 1
    fi
    mv ${{PAM_CONF_FILE}}.tmp ${{PAM_CONF_FILE}}
    if [ $? -ne 0 ]; then
        echo "can't replace ${{PAM_CONF_FILE}}"
        return 1
    fi
}

UnconfigureScxPAM_dir() {
    # Configured with directory
    if [ -f ${{PAM_CONF_DIR}}/scx ]; then  rm -f ${{PAM_CONF_DIR}}/scx
        return 0
    fi
}

%CreateConfBackupTemp
CreateConfBackupTemp() {
    if [ -f /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup ]; then
        cp /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup_tmp
    fi
    if [ -f /etc/opt/microsoft/scx/conf/cimserver_current.conf${{SUNOS_PKGSAVE}} ]; then
        cp /etc/opt/microsoft/scx/conf/cimserver_current.conf${{SUNOS_PKGSAVE}} /etc/opt/microsoft/scx/conf/cimserver_current.conf_tmp
    fi
}

%Preinstall_100
#include CreateConfBackupTemp
CreateConfBackupTemp

%Postinstall_10
#include UnconfigureScxPAM
#include GetNewPAMConfig_funcs
CreateSoftLinkToSudo() {
    [ ! -L /etc/opt/microsoft/scx/conf/sudodir ] && ln -s ${{SUDO_DIR}} /etc/opt/microsoft/scx/conf/sudodir || echo -n
}

WriteInstallInfo() {
    date +%Y-%m-%dT%T.0Z > /etc/opt/microsoft/scx/conf/installinfo.txt
    echo ${{VERSION}}-${{RELEASE}} >> /etc/opt/microsoft/scx/conf/installinfo.txt
}

ConfigurePAM() {
    #
    # Check if pam is configured with single
    # configuration file or with configuration
    # directory.
    #
    if [ -s ${{PAM_CONF_FILE}} ]; then
        ConfigurePAM_file
    elif [ -d ${{PAM_CONF_DIR}} ]; then
        ConfigurePAM_dir
    else
        # No pam configuration.
        echo "PAM does not seem to be configured."
        echo "Checked both ${{PAM_CONF_FILE}} and ${{PAM_CONF_DIR}}."
        return 1
    fi
    return 0
}

ConfigurePAM_file() {
    #
    # First check if omi is already configured in pam.conf
    #
    grep -s "^[# ]*omi" ${{PAM_CONF_FILE}} > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        # Match found
        # Looks like omi is already configured
        echo "omi already configured"
        return 0
    fi
    
    GetNewPAMConfig_file

    #
    # Only update pam.conf if we are returning some new configuration
    if [ "$omi_conf" ]; then
        # Write the final configuration to pam.conf
        #
        # copy file first and modify this copy, so in case of low disk space we preserve the original file
        cp ${{PAM_CONF_FILE}} ${{PAM_CONF_FILE}}.scx-copy && printf "${{PAM_COMMENT}}\n$omi_conf\n${{PAM_COMMENT_CLOSING}}\n" >> ${{PAM_CONF_FILE}}.scx-copy
        if [ $? -ne 0 ]; then
            echo "can't update file ${{PAM_CONF_FILE}}.scx-copy"
            rm -f ${{PAM_CONF_FILE}}.scx-copy
            return 1
        fi
        # verify that complete file was written
        grep "${{PAM_COMMENT_CLOSING}}" ${{PAM_CONF_FILE}}.scx-copy > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "can't update file ${{PAM_CONF_FILE}}.scx-copy"
            rm -f ${{PAM_CONF_FILE}}.scx-copy
            return 1
        fi
        # use move to substitute original file with verified copy
        mv ${{PAM_CONF_FILE}}.scx-copy ${{PAM_CONF_FILE}}
        if [ $? -ne 0 ]; then
            echo "can't replace ${{PAM_CONF_FILE}}"
            return 1
        fi
    fi
}

ConfigurePAM_dir() {
    #
    # First check if omi is already configured
    #
    if [ -f ${{PAM_CONF_DIR}}/omi ]; then
        # Match found
        # Looks like omi is already configured
        echo "omi already configured"
        return 0
    fi

    GetNewPAMConfig_dir

    echo "#%%PAM-1.0
${{PAM_COMMENT}}
$omi_conf" > ${{PAM_CONF_DIR}}/omi
    if [ $? -ne 0 ]; then
        echo "can't create ${{PAM_CONF_DIR}}/omi"
        return 1
    fi
}

ConfigureRunAs() {
    if [ -s ${{RUNAS_CFG}} ]; then
        # File is not zero size
        return 0
    fi
    /opt/microsoft/scx/bin/tools/scxadmin -config-reset RunAs AllowRoot > /dev/null 2>&1
}

HandleConfigFiles() {
    if [ -f /etc/opt/microsoft/scx/conf/omiserver.conf.pkgsave ]; then
        mv /etc/opt/microsoft/scx/conf/omiserver.conf.pkgsave /etc/opt/microsoft/scx/conf/omiserver.conf
    elif [ -f /etc/opt/microsoft/scx/conf/omiserver.conf -a -f /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup_tmp ]; then
        diff /etc/opt/microsoft/scx/conf/omiserver.conf /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup_tmp > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            cp /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup /etc/opt/microsoft/scx/conf/omiserver.conf
        fi
    elif [ ! -f /etc/opt/microsoft/scx/conf/omiserver.conf -a -f /etc/opt/microsoft/scx/conf/cimserver_current.conf_tmp ]; then
        cp /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup /etc/opt/microsoft/scx/conf/omiserver.conf
        echo `grep sslCipherSuite /etc/opt/microsoft/scx/conf/cimserver_current.conf_tmp` | sed "s@sslCipherSuite@sslciphersuite@" >> /etc/opt/microsoft/scx/conf/omiserver.conf
    else
        cp /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup /etc/opt/microsoft/scx/conf/omiserver.conf
    fi
    rm -f /etc/opt/microsoft/scx/conf/cimserver_current.conf* /etc/opt/microsoft/scx/conf/cimserver_planned.conf*
}

RemoveConfBackupTemp() {
    if [ -f /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup_tmp ]; then
        rm /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup_tmp
    fi
    if [ -f /etc/opt/microsoft/scx/conf/cimserver_current.conf_tmp ]; then
        rm /etc/opt/microsoft/scx/conf/cimserver_current.conf_tmp
    fi
}

GenerateCertificate() {
    if [ ! "${{SSL_DIR}}" = "" ] && [ -d ${{SSL_DIR}} ]; then
        if [ -f ${{SSL_DIR}}/scx-seclevel1-key.pem ] && [ ! -f ${{SSL_DIR}}/scx-key.pem ]; then
            mv -f ${{SSL_DIR}}/scx-seclevel1-key.pem ${{SSL_DIR}}/scx-key.pem
        fi
        if [ -f ${{SSL_DIR}}/scx-seclevel1.pem ] && [ ! -f ${{SSL_DIR}}/scx.pem ]; then
            mv -f ${{SSL_DIR}}/scx-seclevel1.pem ${{SSL_DIR}}/scx-host-`hostname`.pem
            ln -s -f ${{SSL_DIR}}/scx-host-`hostname`.pem ${{SSL_DIR}}/scx.pem
        fi
        ( set +e; [ -f /etc/profile ] && . /etc/profile; set -e; ${{SCX_SSL_CONFIG}} )
        if [ $? -ne 0 ]; then
            exit 1
        fi
    else
        # ${{SSL_DIR}} : directory does not exist
        exit 1
    fi
}


%Postinstall_100
set -e

%Postinstall_200
CreateSoftLinkToSudo

%Postinstall_300
WriteInstallInfo

%Postinstall_400
set +e

%Postinstall_500
UnconfigureScxPAM

%Postinstall_600
ConfigurePAM

%Postinstall_700
ConfigureRunAs

%Postinstall_800
HandleConfigFiles

%Postinstall_900
RemoveConfBackupTemp

%Postinstall_1000
GenerateCertificate

%Preuninstall_10
#include UnconfigureScxPAM
#include GetNewPAMConfig_funcs
RemoveConfigFiles() {
    if [ -f /etc/opt/microsoft/scx/conf/omiserver.conf -a -f /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup ]; then
        diff /etc/opt/microsoft/scx/conf/omiserver.conf /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup
        if [ $? -eq 1 ]; then
            mv /etc/opt/microsoft/scx/conf/omiserver.conf /etc/opt/microsoft/scx/conf/omiserver.conf.pkgsave 2> /dev/null
        else
            rm /etc/opt/microsoft/scx/conf/omiserver.conf 2> /dev/null
        fi
    else
        rm /etc/opt/microsoft/scx/conf/omiserver.conf 2> /dev/null
    fi
}

# UnconfigurePAM
UnconfigurePAM() {
    #
    # Check if pam is configured with single
    # configuration file or with configuration
    # directory.
    #
    if [ -s ${{PAM_CONF_FILE}} ]; then
        UnconfigurePAM_file
    elif [ -d ${{PAM_CONF_DIR}} ]; then
        UnconfigurePAM_dir
    fi
}

UnconfigurePAM_file() {
    # Configured with single file

#if PF == SUNOS
    GetNewPAMConfig_file
    GetCurrentPAMConfig_file
    if [ "$omi_conf" != "$omi_current_conf" ]; then
        # It looks like the configuration has been changed since
        # installation or at least would change if we did a reinstall
        # Safest to leave the configuration as is.
        return 0
    fi
#endif

    #
    # Get all lines except omi configuration
    #
    pam_configuration=`grep -v "^[#	]*omi" ${{PAM_CONF_FILE}} | grep -v "${{PAM_COMMENT}}" | grep -v "${{PAM_COMMENT_CLOSING}}"`
    if [ $? -ne 0 ]; then
        # omi not configured in PAM
        return 0
    fi
    
    #
    # Write it back (to the copy first)
    #
    cp -p ${{PAM_CONF_FILE}} ${{PAM_CONF_FILE}}.tmp
    echo "$pam_configuration" > ${{PAM_CONF_FILE}}.tmp
    if [ $? -ne 0 ]; then
        echo "can't write to ${{PAM_CONF_FILE}}.tmp"
        return 1
    fi
    mv ${{PAM_CONF_FILE}}.tmp ${{PAM_CONF_FILE}}
    if [ $? -ne 0 ]; then
        echo "can't replace ${{PAM_CONF_FILE}}"
        return 1
    fi

}

UnconfigurePAM_dir() {
    # Configured with directory
    if [ -f ${{PAM_CONF_DIR}}/omi ]; then

#if PF == SUNOS
        GetNewPAMConfig_dir
        GetCurrentPAMConfig_dir
        if [ "$omi_conf" != "$omi_current_conf" ]; then
            # It looks like the configuration has been changed since
            # installation or at least would change if we did a reinstall
            # Safest to leave the configuration as is.
            return 0
        fi
#endif
        rm -f ${{PAM_CONF_DIR}}/omi
        return 0
    fi

}

RemoveAdditionalFiles() {
    rm -r ${{SCX_TMP_PATH}} > /dev/null 2>&1
}

%Preuninstall_300
RemoveConfigFiles

%Preuninstall_400
UnconfigureScxPAM

%Preuninstall_500
UnconfigurePAM

%Preuninstall_700
RemoveAdditionalFiles

%Preinstall_0
${{SHELL_HEADER}}
%Postinstall_0
${{SHELL_HEADER}}
%Preuninstall_0
${{SHELL_HEADER}}
%Postuninstall_0
${{SHELL_HEADER}}
