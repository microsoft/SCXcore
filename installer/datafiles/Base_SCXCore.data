%Variables
SHELL_HEADER:            '#!/bin/sh'
SCXHOME:                 '/opt/microsoft/scx'
SCX_TMP_PATH:            '/var/opt/microsoft/scx/tmp'
PAM_COMMENT_CLOSING:     '# End of section generated by the scx installer.'
PAM_SCX_COMMENT:         '# The configuration of scx is generated by the scx installer.'
PAM_CONF_FILE:           '/etc/pam.conf'
PAM_CONF_DIR:            '/etc/pam.d'
RUNAS_CFG:               '/etc/opt/microsoft/scx/conf/scxrunas.conf'
SSL_DIR:                 '/etc/opt/microsoft/scx/ssl'
OMI_SSL_DIR:             '/etc/opt/omi/ssl'
GENCERT_CERT_FILE:       'scx-host-`uname -n`.pem'
SCX_SSL_CONFIG:          '/opt/microsoft/scx/bin/tools/scxsslconfig'
SUNOS_PKGSAVE:           ''
SCX_LOC:                 '/etc/opt/microsoft/scx/conf/sudodir'
SUDO_DIR:                '/usr/bin'
TMP_LOC:                 '/etc/opt/microsoft/scx/conf/tmpdir'
TMP_DIR:                 '/tmp'
ROOT_GROUP_NAME:         'root'
SHLIB_EXT:               'so'
DISABLE_PORT:		 'false'

SHORT_NAME:              'scx'
SHORT_NAME_PREFIX:       'MSFT'
LONG_NAME:               'Microsoft System Center 2012 Operations Manager for UNIX/Linux agent'
GROUP:                   'Applications/System'
LICENSE:                 'none'
VENDOR:                  'http://www.microsoft.com'
PROVIDES:                'omproviders'
DESCRIPTION:             'Provides server for Microsoft System Center 2012 Operations Manager.'
MAINTAINER:              'Microsoft Corporation'

%Defines

%Files
/opt/microsoft/scx/bin/setup.sh;                                        intermediate/${{BUILD_CONFIGURATION}}/scx_setup.sh;               644; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/uninstall;                                       installer/conf/uninstall;                                         755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/setup.sh;                                  intermediate/${{BUILD_CONFIGURATION}}/scx_setup_tools.sh;         644; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/scxadmin;                                  intermediate/${{BUILD_CONFIGURATION}}/scxadmin.sh;                755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/scxsslconfig;                              intermediate/${{BUILD_CONFIGURATION}}/scxsslconfig.sh;            755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/.scxsslconfig;                             intermediate/${{BUILD_CONFIGURATION}}${{ULINUX_POSTFIX}}/scxsslconfig;  755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools/.scxadmin;                                 intermediate/${{BUILD_CONFIGURATION}}/scxadmin;                         755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/omi_preexec;                                     intermediate/${{BUILD_CONFIGURATION}}/omi_preexec;                      755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/scxlogfilereader;                                intermediate/${{BUILD_CONFIGURATION}}/scxlogfilereader;                 755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/lib/libSCXCoreProviderModule.${{SHLIB_EXT}};         intermediate/${{BUILD_CONFIGURATION}}/libSCXCoreProviderModule.${{SHLIB_EXT}}; 755; root; ${{ROOT_GROUP_NAME}}

/etc/opt/microsoft/scx/pf_file.sh;                                      intermediate/${{BUILD_CONFIGURATION}}/pf_file.sh;                 444; root; sys
/etc/opt/microsoft/scx/conf/scxconfig.conf;                             installer/conf/scxconfig.conf;                                    644; root; ${{ROOT_GROUP_NAME}}; conffile
/etc/opt/microsoft/scx/conf/scxlog.conf;                                installer/conf/scxlog.conf;                                       644; root; ${{ROOT_GROUP_NAME}}; conffile
/etc/opt/microsoft/scx/conf/scxrunas.conf;                              installer/conf/scxrunas.conf;                                     644; root; ${{ROOT_GROUP_NAME}}; conffile
/etc/opt/microsoft/scx/conf/installinfo.txt;                            installer/conf/installinfo.txt;                                   644; root; ${{ROOT_GROUP_NAME}}; conffile

/etc/opt/omi/conf/omiregister/root-scx/SCXProvider-root.reg;            installer/conf/omi/SCXProvider-root.reg;                          755; root; ${{ROOT_GROUP_NAME}} 
/etc/opt/omi/conf/omiregister/root-scx/SCXProvider-req.reg;             installer/conf/omi/SCXProvider-req.reg;                           755; root; ${{ROOT_GROUP_NAME}} 

%Links
/opt/omi/lib/libSCXCoreProviderModule.${{SHLIB_EXT}}; /opt/microsoft/scx/lib/libSCXCoreProviderModule.${{SHLIB_EXT}}; 644; root; ${{ROOT_GROUP_NAME}}
%% Create a link to make scxadmin easier to run ...
%%
%% On Solaris 5.10 and later, we deal with the /usr/sbin/scxadmin link via postinstall;
%% This is to allow zones to work properly for sparse root zones
#if PF != SunOS
/usr/sbin/scxadmin;                                                     ../../opt/microsoft/scx/bin/tools/scxadmin;                       755; root; ${{ROOT_GROUP_NAME}}
#elseif PFMINOR <= 9
/usr/sbin/scxadmin;                                                     ../../opt/microsoft/scx/bin/tools/scxadmin;                       755; root; ${{ROOT_GROUP_NAME}}
#endif

%Directories
/usr;                                                   755; root; ${{ROOT_GROUP_NAME}}; sysdir
/usr/sbin;                                              755; root; ${{ROOT_GROUP_NAME}}; sysdir
/opt;                                                   755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc;                                                   755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc/opt;                                               755; root; ${{ROOT_GROUP_NAME}}; sysdir
/var;                                                   755; root; ${{ROOT_GROUP_NAME}}; sysdir
/var/opt;                                               755; root; ${{ROOT_GROUP_NAME}}; sysdir
/opt/microsoft;                                         755; root; ${{ROOT_GROUP_NAME}}; sysdir
/opt/microsoft/scx;                                     755; root; ${{ROOT_GROUP_NAME}}

/opt/microsoft/scx/bin;                                 755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/bin/tools;                           755; root; ${{ROOT_GROUP_NAME}}
/opt/microsoft/scx/lib;                                 755; root; ${{ROOT_GROUP_NAME}}

/opt/omi;                                               755; root; ${{ROOT_GROUP_NAME}}; sysdir
/opt/omi/lib;                                           755; root; ${{ROOT_GROUP_NAME}}; sysdir

/etc/opt/microsoft;                                     755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc/opt/microsoft/scx;                                 755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/conf;                            755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/ssl;                             755; root; ${{ROOT_GROUP_NAME}}
/etc/opt/microsoft/scx/conf/.baseconf;                  755; root; ${{ROOT_GROUP_NAME}}

/etc/opt/omi;                                           755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc/opt/omi/conf;                                      755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc/opt/omi/conf/omiregister;                          755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc/opt/omi/conf/omiregister/root-omi;                 755; root; ${{ROOT_GROUP_NAME}}; sysdir
/etc/opt/omi/conf/omiregister/root-scx;                 755; root; ${{ROOT_GROUP_NAME}}

/var/opt/microsoft;                                     755; root; ${{ROOT_GROUP_NAME}}; sysdir
/var/opt/microsoft/scx;                                 755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/tmp;                             755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/lib;                             755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/lib/state;                       755; root; ${{ROOT_GROUP_NAME}}
/var/opt/microsoft/scx/log;                             755; root; ${{ROOT_GROUP_NAME}}

%Dependencies

%CheckIfOmiIsRunning
OMI_IS_RUNNING=1
if [ -f /var/opt/omi/run/omiserver.pid ]; then
    #  Check if omiserver is running with this pid.
    omi_pid=`cat /var/opt/omi/run/omiserver.pid`
    ps -aef | grep $omi_pid | grep omiserver 1> /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
	OMI_IS_RUNNING=0
    fi
else
    OMI_IS_RUNNING=0
fi

%DeleteSoftLinks
DeleteSoftLinkToSudo() {
    if [ -L ${{SCX_LOC}} ]; then
        LINKED_DIR=`(cd ${{SCX_LOC}} ; pwd -P)`
        [ x${LINKED_DIR} = x${{SUDO_DIR}} ] && rm ${{SCX_LOC}}
    fi
}

DeleteSoftLinkToTmpDir() {
    if [ -L ${{TMP_LOC}} ]; then
        LINKED_DIR=`(cd ${{TMP_LOC}} ; pwd -P)`
        [ x${LINKED_DIR} = x${{TMP_DIR}} ] && rm ${{TMP_LOC}}
    fi
}

%UnconfigureScxPAM
# UnconfigureScxPAM
#
# Check if pam is configured with single
# configuration file or with configuration
# directory.
#
UnconfigureScxPAM() {
    if [ -s ${{PAM_CONF_FILE}} ]; then
        UnconfigureScxPAM_file
    elif [ -d ${{PAM_CONF_DIR}} ]; then
        UnconfigureScxPAM_dir
    fi
    return 0
}

UnconfigureScxPAM_file() {
    # Configured with single file
    #
    # Get all lines except scx configuration
    #
    pam_configuration=`grep -v "^[#	]*scx" ${{PAM_CONF_FILE}} | grep -v "${{PAM_SCX_COMMENT}}" | grep -v "${{PAM_COMMENT_CLOSING}}"`
    if [ $? -ne 0 ]; then
        # scx not configured in PAM
        return 0
    fi
    #
    # Write it back (to the copy first)
    #
    cp -p ${{PAM_CONF_FILE}} ${{PAM_CONF_FILE}}.tmp
    echo "$pam_configuration" > ${{PAM_CONF_FILE}}.tmp
    if [ $? -ne 0 ]; then
        echo "can't write to ${{PAM_CONF_FILE}}.tmp"
        return 1
    fi
    mv ${{PAM_CONF_FILE}}.tmp ${{PAM_CONF_FILE}}
    if [ $? -ne 0 ]; then
        echo "can't replace ${{PAM_CONF_FILE}}"
        return 1
    fi
}

UnconfigureScxPAM_dir() {
    # Configured with directory
    if [ -f ${{PAM_CONF_DIR}}/scx ]; then  rm -f ${{PAM_CONF_DIR}}/scx
        return 0
    fi
}

%Postinstall_10
#include UnconfigureScxPAM
CreateSoftLinkToSudo() {
    [ ! -L /etc/opt/microsoft/scx/conf/sudodir ] && ln -s ${{SUDO_DIR}} /etc/opt/microsoft/scx/conf/sudodir || true
}

CreateSoftLinkToTmpDir() {
    [ ! -L /etc/opt/microsoft/scx/conf/tmpdir ] && ln -s ${{TMP_DIR}} /etc/opt/microsoft/scx/conf/tmpdir || true
}

WriteInstallInfo() {
    date +%Y-%m-%dT%T.0Z > /etc/opt/microsoft/scx/conf/installinfo.txt
    echo ${{VERSION}}-${{RELEASE}} >> /etc/opt/microsoft/scx/conf/installinfo.txt
}

ConfigureRunAs() {
    if [ -s ${{RUNAS_CFG}} ]; then
        # File is not zero size
        return 0
    fi
    /opt/microsoft/scx/bin/tools/scxadmin -config-reset RunAs AllowRoot > /dev/null 2>&1
}

HandleConfigFiles() {
    rm -f /etc/opt/microsoft/scx/conf/cimserver_current.conf* /etc/opt/microsoft/scx/conf/cimserver_planned.conf* /etc/opt/microsoft/scx/conf/omiserver.conf*

    # File /etc/scxagent-enable-port opens port 1270 for usage with opsmgr
    if [ -f /etc/scxagent-enable-port ]; then
        # Add port 1270 to the list of ports that OMI will listen on
        /opt/omi/bin/omiconfigeditor httpsport -a 1270 < /etc/opt/omi/conf/omiserver.conf > /etc/opt/omi/conf/omiserver.conf_temp
        mv /etc/opt/omi/conf/omiserver.conf_temp /etc/opt/omi/conf/omiserver.conf
    fi
    rm -f /etc/scxagent-enable-port
}

GenerateCertificate() {
    if [ -d ${{OMI_SSL_DIR}} -a  ! -f /etc/opt/omi/ssl/.omi_cert_marker ]; then
	# No OMI cert marker.  This means that OM has installed certificates to this folder, or there's data corruption.
	return 0
    fi
    
    # Make temporary backups of the omi keys in case we fail to generate keys
    if [ -f ${{OMI_SSL_DIR}}/omikey.pem ]; then
	mv -f ${{OMI_SSL_DIR}}/omikey.pem ${{OMI_SSL_DIR}}/omikey.pem_temp
    fi
    if [ -f ${{OMI_SSL_DIR}}/omi.pem ]; then
	mv -f ${{OMI_SSL_DIR}}/omi.pem ${{OMI_SSL_DIR}}/omi.pem_temp
    fi
    
    if [ -d ${{OMI_SSL_DIR}} ]; then
        if [ -f ${{SSL_DIR}}/scx-seclevel1-key.pem ] && [ ! -f ${{SSL_DIR}}/scx-key.pem ]; then
            mv -f ${{SSL_DIR}}/scx-seclevel1-key.pem ${{OMI_SSL_DIR}}/omikey.pem
	elif [ -f ${{SSL_DIR}}/scx-key.pem ]; then
	    mv -f ${{SSL_DIR}}/scx-key.pem ${{OMI_SSL_DIR}}/omikey.pem
        fi

        if [ -f ${{SSL_DIR}}/scx-seclevel1.pem ] && [ ! -f ${{SSL_DIR}}/scx.pem ]; then
	    rm -f ${{OMI_SSL_DIR}}/omi.pem
            mv -f ${{SSL_DIR}}/scx-seclevel1.pem ${{OMI_SSL_DIR}}/omi-host-`hostname`.pem
            ln -s -f ${{SSL_DIR}}/omi-host-`hostname`.pem ${{OMI_SSL_DIR}}/omi.pem
	elif [ -f ${{SSL_DIR}}/scx.pem ]; then
	    mv ${{SSL_DIR}}/scx.pem ${{OMI_SSL_DIR}}/omi.pem
        fi
	
        ( set +e; [ -f /etc/profile ] && . /etc/profile; set -e; ${{SCX_SSL_CONFIG}} )
        if [ $? -ne 0 ]; then
	    # Restore previous omi keys if they exist
	    if [ -f ${{OMI_SSL_DIR}}/omikey.pem_temp ]; then
		mv -f ${{OMI_SSL_DIR}}/omikey.pem_temp ${{OMI_SSL_DIR}}/omikey.pem
	    fi
	    if [ -f ${{OMI_SSL_DIR}}/omi.pem_temp ]; then
		mv -f ${{OMI_SSL_DIR}}/omi.pem_temp ${{OMI_SSL_DIR}}/omi.pem
	    fi
            exit 21
	else
	    # Certificate generated successfully.  Remove /etc/opt/omi/ssl/.omi_cert_marker to signify that we have overwritten omi's cert
	    rm -f /etc/opt/omi/ssl/.omi_cert_marker
	    rm -f ${{OMI_SSL_DIR}}/omikey.pem_temp ${{OMI_SSL_DIR}}/omi.pem_temp
        fi
    else
        # ${{OMI_SSL_DIR}} : directory does not exist
        exit 22
    fi
}


%Postinstall_100
set -e

%Postinstall_200
CreateSoftLinkToSudo
CreateSoftLinkToTmpDir

%Postinstall_300
WriteInstallInfo

%Postinstall_400
set +e

%Postinstall_500
UnconfigureScxPAM

%Postinstall_600

%Postinstall_700
ConfigureRunAs

%Postinstall_800
HandleConfigFiles

%Postinstall_1000
GenerateCertificate

# Create link from SSL_DIR/scx.pem to OMI_SSL_DIR/omi.pem
if [ -f ${{SSL_DIR}}/scx.pem ]; then
    mv ${{SSL_DIR}}/scx.pem ${{SSL_DIR}}/scx.pem_backup
fi
ln -s ${{OMI_SSL_DIR}}/omi.pem ${{SSL_DIR}}/scx.pem

%Preuninstall_10
#include UnconfigureScxPAM
RemoveConfigFiles() {
    if [ -f /etc/opt/microsoft/scx/conf/omiserver.conf -a -f /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup ]; then
        diff /etc/opt/microsoft/scx/conf/omiserver.conf /etc/opt/microsoft/scx/conf/.baseconf/omiserver.backup
        if [ $? -eq 1 ]; then
            mv /etc/opt/microsoft/scx/conf/omiserver.conf /etc/opt/microsoft/scx/conf/omiserver.conf.pkgsave 2> /dev/null
        else
            rm /etc/opt/microsoft/scx/conf/omiserver.conf 2> /dev/null
        fi
    else
        rm /etc/opt/microsoft/scx/conf/omiserver.conf 2> /dev/null || true
    fi
}

RemoveAdditionalFiles() {
    rm -rf ${{SCX_TMP_PATH}}/* > /dev/null 2>&1
}

%Preuninstall_300
RemoveConfigFiles

rm -f ${{SSL_DIR}}/scx.pem_backup ${{SSL_DIR}}/scx.pem

%Preuninstall_400
UnconfigureScxPAM

%Preuninstall_500

%Preuninstall_700
RemoveAdditionalFiles

%Preinstall_0
${{SHELL_HEADER}}
%Postinstall_0
${{SHELL_HEADER}}
%Preuninstall_0
${{SHELL_HEADER}}
%Postuninstall_0
${{SHELL_HEADER}}
