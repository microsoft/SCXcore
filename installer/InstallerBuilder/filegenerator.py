# coding: utf-8
#
# Copyright (c) Microsoft Corporation.  All rights reserved.
#
##
# Module containing classes to generate files and directories in a target
# directory in various ways.
#
# Date:   2007-09-25 13:45:34
#

import fileinput
import os
import re
import scxutil
import sys

##
# Base class for file generator classes 
#
class BaseObject:
    ##
    # Ctor.
    # \param[in] path Path of item relative to target root directory.
    # \param[in] permissions File permissions.
    # \param[in] owner File owner.
    # \param[in] group File group.
    # \param[in] fileType 'file', 'conffile', 'dir', 'sysdir' or 'link'
    #
    def __init__(self, path, permissions, owner, group, fileType):
        self.path = path
        self.permissions = permissions
        self.owner = owner
        self.group = group
        self.fileType = fileType

    ##
    # Sets the target root directory.
    # \param[in] rootDir Absolute path to root directory.
    #
    def SetRootDir(self, rootDir):
        self.rootDir = rootDir

    ##
    # Create the file. In the base class this implementation is empty.
    #
    def DoCreate(self) :
        pass

    ##
    # Get the file path (relative to root dir).
    # \returns path
    #
    def GetPath(self) :
        return self.path

    ##
    # Set the file path (relative to root dir).
    # \param[in] path
    #
    def SetPath(self, path) :
        self.path = path

    ##
    # Get the file permissions
    # \returns File permissions
    #
    def GetPermissions(self) :
        return self.permissions

    ##
    # Get the file owner
    # \returns File owner
    #
    def GetOwner(self) :
        return self.owner

    ##
    # Get the file group
    # \returns File group
    #
    def GetGroup(self) :
        return self.group

    ##
    # Get the file type.
    # \returns File type ('file', 'conffile', 'dir', 'sysdir' or 'link')
    #
    def GetFileType(self) :
        return self.fileType

    ##
    # Set the file type.
    # \param[in] fileType File 'file', 'conffile', 'dir', 'sysdir' or 'link'
    #
    def SetFileType(self, fileType) :
        self.fileType = fileType


##
# File that is generated by being copied from a source location.
#
class FileCopy(BaseObject):
    ##
    # Ctor.
    # \param[in] path Path of target file relative to target root directory.
    # \param[in] srcPath Path of source file relative to source root directory.
    # \param[in] permissions File permissions.
    # \param[in] owner File owner.
    # \param[in] group File group.
    # \param[in] fileType 'file' or 'conffile'
    #
    def __init__(self, path, srcPath, permissions, owner, group, fileType = 'file'):
        BaseObject.__init__(self, path, permissions, owner, group, fileType)
        self.srcPath = srcPath

    ##
    # Set source directory root.
    # \param[in] rootDir Absolute path to source directory root.
    #
    def SetSrcRootDir(self, rootDir):
        self.srcRootDir = rootDir
        
    ##
    # Set the source file path (relative to source root dir).
    # \param[in] path
    #
    def SetSrcPath(self, path) :
        self.srcPath = path

    ##
    # Set the source file path (relative to source root dir).
    # \returns source path relative to source root dir.
    #
    def GetSrcPath(self) :
        return self.srcPath

    ##
    # Create the file. Copies the file from source to dest.
    #
    def DoCreate(self) :
        scxutil.Copy(os.path.join(self.srcRootDir, self.srcPath),
                     os.path.join(self.rootDir, self.path))

##
# File that is created empty in the staging directory
#
class EmptyFile(BaseObject):
    ##
    # Ctor.
    # \param[in] path Path of target file relative to target root directory.
    # \param[in] permissions File permissions.
    # \param[in] owner File owner.
    # \param[in] group File group.
    # \param[in] fileType 'file' or 'conffile'
    #
    def __init__(self, path, permissions, owner, group, fileType = 'file'):
        BaseObject.__init__(self, path, permissions, owner, group, fileType)

    ##
    # Create the file. Creates an empty file.
    #
    def DoCreate(self) :
        scxutil.Touch(os.path.join(self.rootDir, self.path))


##
# Soft link that is generated in the destination directory
#
class SoftLink(BaseObject):
    ##
    # Ctor.
    # \param[in] path Path of soft link relative to target root directory.
    # \param[in] lnPath Path of link target.
    # \param[in] permissions File permissions.
    # \param[in] owner File owner.
    # \param[in] group File group.
    #
    def __init__(self, path, lnPath, permissions, owner, group):
        BaseObject.__init__(self, path, permissions, owner, group, 'link')
        self.lnPath = lnPath
        
    ##
    # Set source directory root.
    # \param[in] rootDir Absolute path to source directory root.
    #
    def SetSrcRootDir(self, rootDir):
        pass

    ##
    # Get the link target.
    # \returns Link target
    #
    def GetTarget(self):
        return self.lnPath

    ##
    # Set the link target.
    # \patam[in] target Link target
    #
    def SetTarget(self, target):
        self.lnPath = target

    ##
    # Create the file. Copies the file from source to dest.
    #
    def DoCreate(self) :
        scxutil.Link(self.lnPath, os.path.join(self.rootDir, self.path))


##
# Directory that is created new.
#
class NewDirectory(BaseObject):
    ##
    # Ctor.
    # \param[in] path Path of target directory relative to target root directory.
    # \param[in] permissions File permissions.
    # \param[in] owner File owner.
    # \param[in] group File group.
    # \param[in] fileType 'dir' or 'sysdir'
    #
    def __init__(self, path, permissions, owner, group, fileType = 'dir'):
        BaseObject.__init__(self, path, permissions, owner, group, fileType)

    ##
    # Create the directory.
    #
    def DoCreate(self) :
        scxutil.MkDir(os.path.join(self.rootDir, self.path))


##
# Directory that is created new.
#
class DirectoryCopy:
    ##
    # Ctor.
    # \param[in] path Path of target directory relative to target root directory.
    # \param[in] srcPath Absolute path of source directory.
    # \param[in] permissions File permissions of all destination files and directories.
    # \param[in] owner File owner.
    # \param[in] group File group.
    #
    def __init__(self, path, srcPath, permissions, owner, group):
        self.path = path
        self.srcPath = srcPath
        self.permissions = permissions
        self.owner = owner
        self.group = group
        self.directories = []
        self.files = []
        self.PopulateLists("")

    ##
    # Populate self.directories and self.files
    # \param[in] subpath Relative path. Used recursively.
    #
    def PopulateLists(self, subpath):
        targetPath = os.path.join(self.path, subpath)
        dirObject = NewDirectory(targetPath, self.permissions, self.owner, self.group)
        self.directories.append(dirObject)
        
        sourcePath = os.path.join(self.srcPath, subpath)
        names = os.listdir(sourcePath)
        for name in names:
            filePath = os.path.join(sourcePath, name)
            if os.path.isdir(filePath):
                self.PopulateLists(os.path.join(subpath, name))
            elif os.path.isfile(filePath):
                fileCopy = FileCopy(os.path.join(targetPath, name), os.path.join(subpath, name), self.permissions, self.owner, self.group)
                fileCopy.SetSrcRootDir(self.srcPath)
                self.files.append(fileCopy)

    ##
    # Returns a list of NewDirectory objects. One object for each of the directories in srcPath.
    #
    def GetDirectoryList(self) :
        return self.directories

    ##
    # Returns a list of FileCopy objects. One object for each of the files in srcPath.
    #
    def GetFileList(self) :
        return self.files


##
# File that is generated by copying a source location and replacing the
# templated text.
#
# Note: If no rules are added, this class behaves the same as FileCopy.
#       This allows the general staging to use the class and then platform
#       specific rules can optionally add template replacement rules.
#
# Note: Templates are expected to be simple string matches.  This class does
#       not currently handle the use of regular expressions in the template.
#
# Note: Templates are matched to each line in a non-derterministic order.
#
# Note: Each line is checked for only one match.  If you need to do multiple
#       match/replace operations on a single line you will need to extend
#       this class.
#
class FileTemplate(FileCopy):
    ##
    # Ctor.
    # \param[in] path Path of target file relative to target root directory.
    # \param[in] srcPath Path of source file relative to source root directory.
    # \param[in] permissions File permissions.
    # \param[in] owner File owner.
    # \param[in] group File group.
    # \param[in] fileType 'file' or 'conffile'
    #
    def __init__(self, path, srcPath, permissions, owner, group, fileType = 'file'):
        FileCopy.__init__(self, path, srcPath, permissions, owner, group, fileType)
        self.rules = dict()

    ##
    # Add a new template rule.
    # \param[in] template Template string to search for.
    # \param[in] replacement Replacement string, tuple or list.  If this is a tuple
    #                        or list then each element automatically has a newline
    #                        sequence appended.
    #
    def AddRule(self, template, replacement):
        text = ""
        if isinstance(replacement, basestring):
            text = replacement
        else:
            for line in replacement:
                # only add newline for lines after the first one
                if len(text) != 0:
                    text = text + '\n'
                text = text + line
        self.rules[template] = text
        
    ##
    # A function for returning the correct replacement string when a template
    # match is found.
    # \param[in] matchobj
    #
    def SubReplace(self, matchobj):
        # This is a simple class with simple matching abilities.  Someone could
        # break it by using regular expressions in the template.
        if matchobj.group(0) not in self.rules:
            sys.stderr.write(
                'filegenerator.FileTemplate.SubReplace :: bad template match:\n' +
                '    line: ' + matchobj.string + '\n' +
                '    match: ' + matchobj.group(0) + '\n')
            for template in self.rules.iterkeys():
                sys.stderr.write('    template: ' + template + '\n')
            raise KeyError(matchobj.group(0))

        # Return the replacement text for the matched template.
        return self.rules[matchobj.group(0)]

    ##
    # Create the file. Copies the file from source to dest, replacing any matched
    # templates.
    #
    def DoCreate(self):
        # If no rules were added, just call the base class.
        if len(self.rules) == 0:
            FileCopy.DoCreate(self)

        # Create the regular expression for matching templates.
        pattern = '(#N#o#t#h#i#n#g# #s#h#o#u#l#d# #e#v#e#r# #m#a#t#c#h# #t#h#i#s#.#)'
        for template in self.rules.iterkeys():
            pattern = pattern + '|(' + template + ')'

        srcPath = os.path.join(self.srcRootDir, self.srcPath)
        destPath = os.path.join(self.rootDir, self.path)

        dest = open(destPath, 'w')

        try:
            for line in fileinput.FileInput(srcPath):
                line = re.sub(pattern, self.SubReplace, line)
                dest.write(line)

        finally:
            dest.close()
